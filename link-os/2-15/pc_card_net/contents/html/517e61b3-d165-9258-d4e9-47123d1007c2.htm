<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>ZebraBarcodeFactory Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="ZebraBarcodeFactory class" />
    <meta name="System.Keywords" content="Zebra.Sdk.Card.Graphics.Barcode.ZebraBarcodeFactory class" />
    <meta name="Microsoft.Help.F1" content="Zebra.Sdk.Card.Graphics.Barcode.ZebraBarcodeFactory" />
    <meta name="Microsoft.Help.Id" content="T:Zebra.Sdk.Card.Graphics.Barcode.ZebraBarcodeFactory" />
    <meta name="Description" content="Factory used to acquire an instance of a font specific barcode object." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Zebra.Sdk.Card.Graphics.Barcode" />
    <meta name="file" content="517e61b3-d165-9258-d4e9-47123d1007c2" />
    <meta name="guid" content="517e61b3-d165-9258-d4e9-47123d1007c2" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Zebra API (build v2.15.2634)<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\28f08ed4-7778-403a-9042-a65f86c5abad.htm" title="Zebra API (build v2.15.2634)" tocid="roottoc">Zebra API (build v2.15.2634)</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/182c09de-d6c2-f479-efab-01c78434ea37.htm" title="Namespaces" tocid="182c09de-d6c2-f479-efab-01c78434ea37">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/bf2c7383-dfa8-637b-5ee9-0d805370e317.htm" title="Zebra.Sdk.Card.Graphics.Barcode" tocid="bf2c7383-dfa8-637b-5ee9-0d805370e317">Zebra.Sdk.Card.Graphics.Barcode</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/517e61b3-d165-9258-d4e9-47123d1007c2.htm" title="ZebraBarcodeFactory Class" tocid="517e61b3-d165-9258-d4e9-47123d1007c2">ZebraBarcodeFactory Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/ec06ce25-4af1-8e6f-0dee-3ad8a421c135.htm" title="ZebraBarcodeFactory Constructor " tocid="ec06ce25-4af1-8e6f-0dee-3ad8a421c135">ZebraBarcodeFactory Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/06578fbf-6d07-c77d-9e4b-cb21bfa12dc5.htm" title="ZebraBarcodeFactory Methods" tocid="06578fbf-6d07-c77d-9e4b-cb21bfa12dc5">ZebraBarcodeFactory Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="titleColumn">
              <h1>ZebraBarcodeFactory Class</h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
            Factory used to acquire an instance of a font specific barcode object.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LSTBFF062F5_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBFF062F5_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Zebra.Sdk.Card.Graphics.Barcode<span id="LSTBFF062F5_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBFF062F5_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ZebraBarcodeFactory</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="bf2c7383-dfa8-637b-5ee9-0d805370e317.htm">Zebra.Sdk.Card.Graphics.Barcode</a><br />
    <strong>Assembly:</strong>
   SdkApi.Card.Desktop (in SdkApi.Card.Desktop.dll) Version: 2.15.2634<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1ECCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','cs','1','3');return false;">C#</a></div><div id="ID1ECCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','vb','2','3');return false;">VB</a></div><div id="ID1ECCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','cpp','3','3');return false;">C++</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1ECCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID1ECCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">ZebraBarcodeFactory</span></pre></div><div id="ID1ECCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">ZebraBarcodeFactory</span></pre></div><div id="ID1ECCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">ZebraBarcodeFactory</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1ECCA");</script></div><p>The <span class="selflink">ZebraBarcodeFactory</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="ec06ce25-4af1-8e6f-0dee-3ad8a421c135.htm">ZebraBarcodeFactory</a></td><td><div class="summary">Initializes a new instance of the <span class="selflink">ZebraBarcodeFactory</span> class</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/bsc2ak47" target="_blank">Equals</a></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="ab63c754-d192-e6a1-cbba-13020e68301e.htm">GetCode128</a></td><td><div class="summary">
            Returns the barcode utilites class for Code128 barcodes.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="00f0ff25-1798-5d09-8b7d-857a437b2d72.htm">GetCode39</a></td><td><div class="summary">
            Returns the barcode utilites class for Code39 barcodes.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="055b7784-1705-471c-cc78-50d6b7d5e7d9.htm">GetCodeEAN13</a></td><td><div class="summary">
            Returns the barcode utilites class for EAN13 barcodes.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="f059c804-65b1-db39-e8d5-ce359f0394e2.htm">GetCodeEAN8</a></td><td><div class="summary">
            Returns the barcode utilites class for EAN8 barcodes.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="d5f4f316-cb98-5775-bffd-2398bdc8facd.htm">GetCodePDF417</a></td><td><div class="summary">
            Returns the barcode utilites class for EAN13 barcodes.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/zdee4b3y" target="_blank">GetHashCode</a></td><td><div class="summary">Serves as the default hash function. </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="27907d87-c0b9-86ee-8f80-1e8aad441cbe.htm">GetQRCode</a></td><td><div class="summary">
            Returns the barcode utilites class for QRCode barcodes.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/dfwy45w9" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="http://msdn2.microsoft.com/en-us/library/42892f65" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/7bxwbwt2" target="_blank">ToString</a></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID5RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Containers;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Enumerations;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Graphics;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Graphics.Barcode;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Job;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Printer;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> PrintBarcodeExample {
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> CARD_FEED_TIMEOUT = <span class="highlight-number">30000</span>;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args) {
<span class="highlight-spacer"></span>        Connection connection = <span class="highlight-keyword">null</span>;
<span class="highlight-spacer"></span>        ZebraCardPrinter zebraCardPrinter = <span class="highlight-keyword">null</span>;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>        <span class="highlight-keyword">try</span> {
<span class="highlight-spacer"></span>            connection = <span class="highlight-keyword">new</span> TcpConnection(<span class="highlight-literal">"1.2.3.4"</span>, <span class="highlight-number">9100</span>);
<span class="highlight-spacer"></span>            connection.Open();
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            zebraCardPrinter = ZebraCardPrinterFactory.GetInstance(connection);
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            List&lt;GraphicsInfo&gt; graphicsData = <span class="highlight-keyword">new</span> List&lt;GraphicsInfo&gt;() {
<span class="highlight-spacer"></span>                DrawGraphics(zebraCardPrinter)
<span class="highlight-spacer"></span>            };
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            zebraCardPrinter.SetJobSetting(ZebraCardJobSettingNames.K_OPTIMIZATION_FRONT, <span class="highlight-literal">"Barcode"</span>);
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            <span class="highlight-comment">// Send job</span>
<span class="highlight-spacer"></span>            <span class="highlight-keyword">int</span> jobId = zebraCardPrinter.Print(<span class="highlight-number">1</span>, graphicsData);
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            <span class="highlight-comment">// Poll job status</span>
<span class="highlight-spacer"></span>            JobStatusInfo jobStatus = PollJobStatus(jobId, zebraCardPrinter);
<span class="highlight-spacer"></span>            Console.WriteLine($<span class="highlight-literal">"Job {jobId} completed with status '{jobStatus.PrintStatus}'."</span>);
<span class="highlight-spacer"></span>        } <span class="highlight-keyword">catch</span> (Exception e) {
<span class="highlight-spacer"></span>            Console.WriteLine($<span class="highlight-literal">"Error printing barcode image: {e.Message}"</span>);
<span class="highlight-spacer"></span>        } <span class="highlight-keyword">finally</span> {
<span class="highlight-spacer"></span>            CloseQuietly(connection, zebraCardPrinter);
<span class="highlight-spacer"></span>        }
<span class="highlight-spacer"></span>    }
<span class="highlight-spacer"></span>
<span id="hrCol44" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp44', 'hrCol44');">+</span><span class="highlight-collapsed">Graphics</span></span><span id="hrExp44" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol44', 'hrExp44');">-</span>    <span class="highlight-preprocessor">#region</span> Graphics
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ConnectionException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="System.IO.IOException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="NotSupportedException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="System.Security.SecurityException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="UnauthorizedAccessException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> GraphicsInfo DrawGraphics(ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// Generate image data</span>
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">using</span> (ZebraGraphics graphics = <span class="highlight-keyword">new</span> ZebraCardGraphics(zebraCardPrinter)) {
<span class="highlight-expanded"> </span>            graphics.Initialize(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, OrientationType.Landscape, PrintType.MonoK, <span class="highlight-keyword">null</span>);
<span class="highlight-expanded"> </span>            DrawQRCode(graphics);
<span class="highlight-expanded"> </span>            DrawCode39(graphics);
<span class="highlight-expanded"> </span>            DrawCode128(graphics);
<span class="highlight-expanded"> </span>            DrawCodePDF417(graphics);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            ZebraCardImageI imageData = graphics.CreateImage();
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">return</span> AddImage(CardSide.Front, PrintType.MonoK, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">-1</span>, imageData);
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> DrawQRCode(ZebraGraphics graphics) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">using</span> (QRCodeUtil qrCode = ZebraBarcodeFactory.GetQRCode(graphics)) {
<span class="highlight-expanded"> </span>            qrCode.ValueToEncode = <span class="highlight-literal">"https://www.zebra.com"</span>;
<span class="highlight-expanded"> </span>            qrCode.DrawBarcode(<span class="highlight-number">50</span>, <span class="highlight-number">50</span>, <span class="highlight-number">75</span>, <span class="highlight-number">75</span>);
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> DrawCode39(ZebraGraphics graphics) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">using</span> (Code39Util code39 = ZebraBarcodeFactory.GetCode39(graphics)) {
<span class="highlight-expanded"> </span>            code39.ValueToEncode = <span class="highlight-literal">"1234567890"</span>;
<span class="highlight-expanded"> </span>            code39.QuietZoneWidth = <span class="highlight-number">0</span>;
<span class="highlight-expanded"> </span>            code39.DrawBarcode(<span class="highlight-number">50</span>, <span class="highlight-number">175</span>, <span class="highlight-number">400</span>, <span class="highlight-number">75</span>);
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> DrawCode128(ZebraGraphics graphics) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">using</span> (Code128Util code128 = ZebraBarcodeFactory.GetCode128(graphics)) {
<span class="highlight-expanded"> </span>            code128.ValueToEncode = <span class="highlight-literal">"Code128 Test"</span>;
<span class="highlight-expanded"> </span>            code128.QuietZoneWidth = <span class="highlight-number">0</span>;
<span class="highlight-expanded"> </span>            code128.DrawBarcode(<span class="highlight-number">50</span>, <span class="highlight-number">325</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> DrawCodePDF417(ZebraGraphics graphics) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">using</span> (CodePDF417Util codePdf417 = ZebraBarcodeFactory.GetCodePDF417(graphics)) {
<span class="highlight-expanded"> </span>            codePdf417.ValueToEncode = <span class="highlight-literal">"Zebra Technologies"</span>;
<span class="highlight-expanded"> </span>            codePdf417.QuietZoneWidth = <span class="highlight-number">0</span>;
<span class="highlight-expanded"> </span>            codePdf417.DrawBarcode(<span class="highlight-number">50</span>, <span class="highlight-number">475</span>, <span class="highlight-number">300</span>, <span class="highlight-number">100</span>);
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> GraphicsInfo AddImage(CardSide side, PrintType printType, <span class="highlight-keyword">int</span> xOffset, <span class="highlight-keyword">int</span> yOffset, <span class="highlight-keyword">int</span> fillColor, ZebraCardImageI zebraCardImage) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> GraphicsInfo {
<span class="highlight-expanded"> </span>            Side = side,
<span class="highlight-expanded"> </span>            PrintType = printType,
<span class="highlight-expanded"> </span>            GraphicType = zebraCardImage != <span class="highlight-keyword">null</span> ? GraphicType.BMP : GraphicType.NA,
<span class="highlight-expanded"> </span>            XOffset = xOffset,
<span class="highlight-expanded"> </span>            YOffset = yOffset,
<span class="highlight-expanded"> </span>            FillColor = fillColor,
<span class="highlight-expanded"> </span>            Opacity = <span class="highlight-number">0</span>,
<span class="highlight-expanded"> </span>            Overprint = <span class="highlight-keyword">false</span>,
<span class="highlight-expanded"> </span>            GraphicData = zebraCardImage ?? <span class="highlight-keyword">null</span>
<span class="highlight-expanded"> </span>        };
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> Graphics</span>
<span class="highlight-spacer"></span>
<span id="hrCol120" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp120', 'hrCol120');">+</span><span class="highlight-collapsed">JobStatus</span></span><span id="hrExp120" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol120', 'hrExp120');">-</span>    <span class="highlight-preprocessor">#region</span> JobStatus
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ConnectionException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="System.IO.IOException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="OverflowException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Settings.SettingsException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> JobStatusInfo PollJobStatus(<span class="highlight-keyword">int</span> jobId, ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        JobStatusInfo jobStatusInfo = <span class="highlight-keyword">new</span> JobStatusInfo();
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">bool</span> isFeeding = <span class="highlight-keyword">false</span>;
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">long</span> start = Math.Abs(Environment.TickCount);
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>) {
<span class="highlight-expanded"> </span>            jobStatusInfo = zebraCardPrinter.GetJobStatus(jobId);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (!isFeeding) {
<span class="highlight-expanded"> </span>                start = Math.Abs(Environment.TickCount);
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            isFeeding = jobStatusInfo.CardPosition.Contains(<span class="highlight-literal">"feeding"</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> alarmDesc = jobStatusInfo.AlarmInfo.Value &gt; <span class="highlight-number">0</span> ? $<span class="highlight-literal">" ({jobStatusInfo.AlarmInfo.Description})"</span> : <span class="highlight-literal">""</span>;
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> errorDesc = jobStatusInfo.ErrorInfo.Value &gt; <span class="highlight-number">0</span> ? $<span class="highlight-literal">" ({jobStatusInfo.ErrorInfo.Description})"</span> : <span class="highlight-literal">""</span>;
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            Console.WriteLine($<span class="highlight-literal">"Job {jobId}: status:{jobStatusInfo.PrintStatus}, position:{jobStatusInfo.CardPosition}, alarm:{jobStatusInfo.AlarmInfo.Value}{alarmDesc}, error:{jobStatusInfo.ErrorInfo.Value}{errorDesc}"</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"done_ok"</span>)) {
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">break</span>;
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"error"</span>) || jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"cancelled"</span>)) {
<span class="highlight-expanded"> </span>                Console.WriteLine($<span class="highlight-literal">"The job encountered an error [{jobStatusInfo.ErrorInfo.Description}] and was cancelled."</span>);
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">break</span>;
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.ErrorInfo.Value &gt; <span class="highlight-number">0</span>) {
<span class="highlight-expanded"> </span>                Console.WriteLine($<span class="highlight-literal">"The job encountered an error [{jobStatusInfo.ErrorInfo.Description}] and was cancelled."</span>);
<span class="highlight-expanded"> </span>                zebraCardPrinter.Cancel(jobId);
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"in_progress"</span>) &amp;&amp; isFeeding) {
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">if</span> (Math.Abs(Environment.TickCount) &gt; start + CARD_FEED_TIMEOUT) {
<span class="highlight-expanded"> </span>                    Console.WriteLine(<span class="highlight-literal">"The job timed out waiting for a card and was cancelled."</span>);
<span class="highlight-expanded"> </span>                    zebraCardPrinter.Cancel(jobId);
<span class="highlight-expanded"> </span>                }
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            Thread.Sleep(<span class="highlight-number">1000</span>);
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> jobStatusInfo;
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> JobStatus</span>
<span class="highlight-spacer"></span>
<span id="hrCol167" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp167', 'hrCol167');">+</span><span class="highlight-collapsed">CleanUp</span></span><span id="hrExp167" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol167', 'hrExp167');">-</span>    <span class="highlight-preprocessor">#region</span> CleanUp
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> CloseQuietly(Connection connection, ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (zebraCardPrinter != <span class="highlight-keyword">null</span>) {
<span class="highlight-expanded"> </span>                zebraCardPrinter.Destroy();
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">catch</span> { }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (connection != <span class="highlight-keyword">null</span>) {
<span class="highlight-expanded"> </span>                connection.Close();
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">catch</span> { }
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> CleanUp</span>
<span class="highlight-spacer"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="bf2c7383-dfa8-637b-5ee9-0d805370e317.htm">Zebra.Sdk.Card.Graphics.Barcode Namespace</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>© 2017 ZIH Corp. All Rights Reserved.</p> </div>
  </body>
</html>