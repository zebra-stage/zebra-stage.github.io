<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>SettingsProvider Interface</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="SettingsProvider interface" />
    <meta name="System.Keywords" content="Zebra.Sdk.Settings.SettingsProvider interface" />
    <meta name="Microsoft.Help.F1" content="Zebra.Sdk.Settings.SettingsProvider" />
    <meta name="Microsoft.Help.Id" content="T:Zebra.Sdk.Settings.SettingsProvider" />
    <meta name="Description" content="Interface that provides access to device related settings." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Zebra.Sdk.Settings" />
    <meta name="file" content="03d1eb1f-9a74-af9f-8e23-7c5cd484e7a5" />
    <meta name="guid" content="03d1eb1f-9a74-af9f-8e23-7c5cd484e7a5" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Zebra API (build v2.15.2634)<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\c34c1e19-4d4a-431b-9c0e-a98422cef19e.htm" title="Zebra API (build v2.15.2634)" tocid="roottoc">Zebra API (build v2.15.2634)</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/4a02358a-55db-cca3-608a-647c3868a044.htm" title="Namespaces" tocid="4a02358a-55db-cca3-608a-647c3868a044">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/49fd0800-6b6b-8535-ee9a-b6a6cea0f996.htm" title="Zebra.Sdk.Settings" tocid="49fd0800-6b6b-8535-ee9a-b6a6cea0f996">Zebra.Sdk.Settings</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/03d1eb1f-9a74-af9f-8e23-7c5cd484e7a5.htm" title="SettingsProvider Interface" tocid="03d1eb1f-9a74-af9f-8e23-7c5cd484e7a5">SettingsProvider Interface</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/39d7837b-8664-c728-d3eb-65b6d1c0bcd9.htm" title="SettingsProvider Methods" tocid="39d7837b-8664-c728-d3eb-65b6d1c0bcd9">SettingsProvider Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="titleColumn">
              <h1>SettingsProvider Interface</h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
      Interface that provides access to device related settings.
    </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="49fd0800-6b6b-8535-ee9a-b6a6cea0f996.htm">Zebra.Sdk.Settings</a><br />
    <strong>Assembly:</strong>
   SdkApi.Core (in SdkApi.Core.dll) Version: 2.15.2634<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0ECCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cpp','3','3');return false;">C++</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="identifier">SettingsProvider</span></pre></div><div id="ID0ECCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Interface</span> <span class="identifier">SettingsProvider</span></pre></div><div id="ID0ECCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface class</span> <span class="identifier">SettingsProvider</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script></div><p>The <span class="selflink">SettingsProvider</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID2RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="e62532e6-92cd-2c1e-c6c4-aded2f1bd90f.htm">GetAllSettings</a></td><td><div class="summary">
            Retrieve all settings and their attributes.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="faecdc61-6e36-94f6-d31f-9195aa0ce9fb.htm">GetAllSettingValues</a></td><td><div class="summary">
            Retrieves all of the device's setting values.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="259f1e92-e142-33cc-083f-23c0be774d9b.htm">GetAvailableSettings</a></td><td><div class="summary">
            Retrieve all of the setting identifiers for a device.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="d1dd2340-afab-f42e-1dab-caf1b4b83e7c.htm">GetSettingRange</a></td><td><div class="summary">
            Retrieves the allowable range for a setting.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="8125250d-3305-9121-ab2a-d6c0f007080b.htm">GetSettingsValues</a></td><td><div class="summary">
            Retrieves the device's setting values for a list of setting IDs.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="59514411-5f66-4059-c881-e40c48bda652.htm">GetSettingType</a></td><td><div class="summary">
            Returns the data type of the setting.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="1f9bf134-25b9-07c9-cce8-1d5936ef48bc.htm">GetSettingValue</a></td><td><div class="summary">
            Retrieves the device's setting value for a setting id.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="eae8b79f-ac56-1da9-b3fb-4ecaf8b1a820.htm">IsSettingReadOnly</a></td><td><div class="summary">
            Returns true if the setting is read only.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="957ef89c-4c06-52bf-3bb5-0ab7554f669e.htm">IsSettingValid</a></td><td><div class="summary">
            Returns true if value is valid for the given setting.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="293359ca-dde5-a6e5-769f-dcac17b42749.htm">IsSettingWriteOnly</a></td><td><div class="summary">
            Returns true if the setting is write only.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="5fea1476-9c6c-7a96-9920-3c5000f4bfac.htm">ProcessSettingsViaMap</a></td><td><div class="summary">
            Change or retrieve printer settings. 
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="1760cd5e-52a1-1f4b-f522-74bc22d1e5ea.htm">SetSetting</a></td><td><div class="summary">
            Sets the setting to the given value.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="887e0f87-acfa-6813-d9f0-1fb9dde084a5.htm">SetSettings</a></td><td><div class="summary">
            Set more than one setting.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID3RBSection" class="collapsibleSection">
      Desktop
      <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAACBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAACBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAACBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-keyword">using</span> Zebra.Sdk.Device;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer.Discovery;
<span class="highlight-keyword">using</span> Zebra.Sdk.Settings;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> SettingsProviderExample {

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args) {
        <span class="highlight-keyword">try</span> {
            <span class="highlight-keyword">foreach</span> (DiscoveredUsbPrinter usbPrinter <span class="highlight-keyword">in</span> UsbDiscoverer.GetZebraUsbPrinters(<span class="highlight-keyword">new</span> ZebraPrinterFilter())) {
                Connection c = usbPrinter.GetConnection();
                c.Open();
                <span class="highlight-keyword">if</span> (c.Connected) {
                    DisplaySettings(c);
                }
                c.Close();
            }
        } <span class="highlight-keyword">catch</span> (SettingsException e) {
            Console.WriteLine(e.ToString());
        } <span class="highlight-keyword">catch</span> (ConnectionException e) {
            Console.WriteLine(e.ToString());
        } <span class="highlight-keyword">catch</span> (ZebraPrinterLanguageUnknownException e) {
            Console.WriteLine(e.ToString());
        } <span class="highlight-keyword">catch</span> (ZebraIllegalArgumentException e) {
            Console.WriteLine(e.ToString());
        }
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> DisplaySettings(Connection c) {
        ZebraPrinter genericPrinter = ZebraPrinterFactory.GetInstance(c);
        ZebraPrinterLinkOs linkOsPrinter = ZebraPrinterFactory.CreateLinkOsPrinter(genericPrinter);

        <span class="highlight-keyword">if</span> (linkOsPrinter != <span class="highlight-keyword">null</span>) {
            Console.WriteLine(<span class="highlight-literal">"Available Settings for myDevice"</span>);
            HashSet&lt;<span class="highlight-keyword">string</span>&gt; availableSettings = linkOsPrinter.GetAvailableSettings();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">string</span> setting <span class="highlight-keyword">in</span> availableSettings) {
                Console.WriteLine($<span class="highlight-literal">"{setting}: Range = ({linkOsPrinter.GetSettingRange(setting)})"</span>);
            }

            Console.WriteLine(<span class="highlight-literal">"\nCurrent Setting Values for myDevice"</span>);
            Dictionary&lt;<span class="highlight-keyword">string</span>, <span class="highlight-keyword">string</span>&gt; allSettingValues = linkOsPrinter.GetAllSettingValues();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">string</span> settingName <span class="highlight-keyword">in</span> allSettingValues.Keys) {
                Console.WriteLine($<span class="highlight-literal">"{settingName}:{allSettingValues[settingName]}"</span>);
            }

            <span class="highlight-keyword">string</span> darknessSettingId = <span class="highlight-literal">"print.tone"</span>;
            <span class="highlight-keyword">string</span> newDarknessValue = <span class="highlight-literal">"10.0"</span>;
            <span class="highlight-keyword">if</span> (availableSettings.Contains(darknessSettingId) &amp;&amp;
                linkOsPrinter.IsSettingValid(darknessSettingId, newDarknessValue) &amp;&amp;
                linkOsPrinter.IsSettingReadOnly(darknessSettingId) == <span class="highlight-keyword">false</span>) {
                linkOsPrinter.SetSetting(darknessSettingId, newDarknessValue);
            }

            Console.WriteLine($<span class="highlight-literal">"\nNew {darknessSettingId} Value = {linkOsPrinter.GetSettingValue(darknessSettingId)}"</span>);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAACBA");</script></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID4RBSection" class="collapsibleSection">
      Android™
      <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Android.App;
<span class="highlight-keyword">using</span> Android.Content;
<span class="highlight-keyword">using</span> Android.Hardware.Usb;
<span class="highlight-keyword">using</span> Android.OS;
<span class="highlight-keyword">using</span> Android.Views;
<span class="highlight-keyword">using</span> Android.Widget;
<span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-keyword">using</span> System.Threading.Tasks;
<span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer.Discovery;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> SettingsProviderExample : Activity {

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> USB_PERMISSION_TIMEOUT = <span class="highlight-number">30000</span>;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> ACTION_USB_PERMISSION = <span class="highlight-literal">"com.settingsprovider.example.ACTION_USB_PERMISSION"</span>;

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> IntentFilter filter = <span class="highlight-keyword">new</span> IntentFilter(ACTION_USB_PERMISSION);
    <span class="highlight-keyword">private</span> UsbReceiver usbReceiver;

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnCreate(Bundle savedInstanceState) {
        <span class="highlight-keyword">base</span>.OnCreate(savedInstanceState);

        LinearLayout layout = (LinearLayout)View.Inflate(<span class="highlight-keyword">this</span>, Android.Resource.Layout.ActivityListItem, <span class="highlight-keyword">null</span>);
        layout.Orientation = Orientation.Vertical;

        Button testButton = <span class="highlight-keyword">new</span> Button(<span class="highlight-keyword">this</span>) {
            Text = <span class="highlight-literal">"Run Settings Util Example"</span>,
            LayoutParameters = <span class="highlight-keyword">new</span> ViewGroup.LayoutParams(<span class="highlight-keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.WrapContent, ViewGroup.LayoutParams.WrapContent))
        };
        layout.AddView(testButton);

        SetContentView(layout);
        usbReceiver = <span class="highlight-keyword">new</span> UsbReceiver();

        testButton.Click += <span class="highlight-keyword">async</span> (sender, e) =&gt; {
            <span class="highlight-keyword">try</span> {
                UsbDiscoveryHandler discoveryHandler = <span class="highlight-keyword">new</span> UsbDiscoveryHandler();
                UsbDiscoverer.FindPrinters(ApplicationContext, discoveryHandler);

                <span class="highlight-keyword">while</span> (!discoveryHandler.DiscoveryComplete) {
                    Thread.Sleep(<span class="highlight-number">10</span>);
                }

                <span class="highlight-keyword">foreach</span> (DiscoveredPrinter printer <span class="highlight-keyword">in</span> discoveryHandler.DiscoveredPrinters) {
                    <span class="highlight-keyword">await</span> RequestUsbPermission(printer);

                    Connection connection = printer.GetConnection();
                    <span class="highlight-keyword">try</span> {
                        connection.Open();
                        <span class="highlight-keyword">if</span> (connection.Connected) {
                            DisplaySettings(connection);
                        }
                    } <span class="highlight-keyword">finally</span> {
                        connection.Close();
                    }
                }
            } <span class="highlight-keyword">catch</span> (Exception ex) {
                Console.WriteLine(ex.ToString());
            }
        };
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> DisplaySettings(Connection connection) {
        ZebraPrinter genericPrinter = ZebraPrinterFactory.GetInstance(connection);
        ZebraPrinterLinkOs linkOsPrinter = ZebraPrinterFactory.CreateLinkOsPrinter(genericPrinter);

        <span class="highlight-keyword">if</span> (linkOsPrinter != <span class="highlight-keyword">null</span>) {
            Console.WriteLine(<span class="highlight-literal">"Available Settings for myDevice"</span>);
            HashSet&lt;<span class="highlight-keyword">string</span>&gt; availableSettings = linkOsPrinter.GetAvailableSettings();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">string</span> setting <span class="highlight-keyword">in</span> availableSettings) {
                Console.WriteLine($<span class="highlight-literal">"{setting}: Range = ({linkOsPrinter.GetSettingRange(setting)})"</span>);
            }

            Console.WriteLine(<span class="highlight-literal">"\nCurrent Setting Values for myDevice"</span>);
            Dictionary&lt;<span class="highlight-keyword">string</span>, <span class="highlight-keyword">string</span>&gt; allSettingValues = linkOsPrinter.GetAllSettingValues();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">string</span> settingName <span class="highlight-keyword">in</span> allSettingValues.Keys) {
                Console.WriteLine($<span class="highlight-literal">"{settingName}:{allSettingValues[settingName]}"</span>);
            }

            <span class="highlight-keyword">string</span> darknessSettingId = <span class="highlight-literal">"print.tone"</span>;
            <span class="highlight-keyword">string</span> newDarknessValue = <span class="highlight-literal">"10.0"</span>;
            <span class="highlight-keyword">if</span> (availableSettings.Contains(darknessSettingId) &amp;&amp;
                linkOsPrinter.IsSettingValid(darknessSettingId, newDarknessValue) &amp;&amp;
                linkOsPrinter.IsSettingReadOnly(darknessSettingId) == <span class="highlight-keyword">false</span>) {
                linkOsPrinter.SetSetting(darknessSettingId, newDarknessValue);
            }

            Console.WriteLine($<span class="highlight-literal">"\nNew {darknessSettingId} Value = {linkOsPrinter.GetSettingValue(darknessSettingId)}"</span>);
        }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnPause() {
        UnregisterReceiver(usbReceiver);
        <span class="highlight-keyword">base</span>.OnPause();
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnResume() {
        <span class="highlight-keyword">base</span>.OnResume();
        RegisterReceiver(usbReceiver, filter);
    }

    <span class="highlight-comment">/// &lt;exception cref="ConnectionException"&gt;If USB permission is not granted.&lt;/exception&gt;</span>
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">async</span> Task RequestUsbPermission(DiscoveredPrinter printer) {
        UsbManager usbManager = (UsbManager)GetSystemService(UsbService);
        UsbDevice usbDevice = ((DiscoveredPrinterUsb)printer).Device;
        <span class="highlight-keyword">if</span> (!usbManager.HasPermission(usbDevice)) {
            PendingIntent permissionIntent = PendingIntent.GetBroadcast(<span class="highlight-keyword">this</span>, <span class="highlight-number">0</span>, <span class="highlight-keyword">new</span> Intent(ACTION_USB_PERMISSION), <span class="highlight-number">0</span>);
            usbManager.RequestPermission(usbDevice, permissionIntent);

            <span class="highlight-keyword">await</span> Task.Run(() =&gt; {
                <span class="highlight-keyword">long</span> timeout = Math.Abs(System.Environment.TickCount) + USB_PERMISSION_TIMEOUT;
                <span class="highlight-keyword">do</span> {
                    Thread.Sleep(<span class="highlight-number">10</span>);
                    <span class="highlight-keyword">if</span> (Math.Abs(System.Environment.TickCount) &gt; timeout) {
                        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> ConnectionException(<span class="highlight-literal">"Timed out waiting for Usb permission."</span>);
                    }
                } <span class="highlight-keyword">while</span> (usbReceiver.Result != Result.Ok);

                <span class="highlight-keyword">if</span> (!usbReceiver.HasPermission) {
                    <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> ConnectionException(<span class="highlight-literal">"Usb permission denied."</span>);
                }
            });
        }
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">class</span> UsbDiscoveryHandler : DiscoveryHandler {

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> DiscoveryError(<span class="highlight-keyword">string</span> message) {
            Console.WriteLine($<span class="highlight-literal">"An error occurred during discovery: {message}."</span>);
            DiscoveryComplete = <span class="highlight-keyword">true</span>;
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> DiscoveryFinished() {
            DiscoveryComplete = <span class="highlight-keyword">true</span>;
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> FoundPrinter(DiscoveredPrinter printer) {
            DiscoveredPrinters.Add(printer);
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> DiscoveryComplete { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; } = <span class="highlight-keyword">false</span>;

        <span class="highlight-keyword">public</span> List&lt;DiscoveredPrinter&gt; DiscoveredPrinters { <span class="highlight-keyword">get</span>; } = <span class="highlight-keyword">new</span> List&lt;DiscoveredPrinter&gt;();
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">class</span> UsbReceiver : BroadcastReceiver {

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> HasPermission {
            <span class="highlight-keyword">get</span>;
            <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>;
        } = <span class="highlight-keyword">false</span>;

        <span class="highlight-keyword">public</span> Result Result {
            <span class="highlight-keyword">get</span>;
            <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>;
        } = Result.Canceled;


        <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnReceive(Context context, Intent intent) {
            <span class="highlight-keyword">string</span> action = intent.Action;
            <span class="highlight-keyword">if</span> (ACTION_USB_PERMISSION.Equals(action)) {
                UsbDevice device = (UsbDevice)intent.GetParcelableExtra(UsbManager.ExtraDevice);
                <span class="highlight-keyword">if</span> (intent.GetBooleanExtra(UsbManager.ExtraPermissionGranted, <span class="highlight-keyword">false</span>)) {
                    <span class="highlight-keyword">if</span> (device != <span class="highlight-keyword">null</span>) {
                        HasPermission = <span class="highlight-keyword">true</span>;
                    }
                }
                Result = Result.Ok;
            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID5RBSection" class="collapsibleSection">
      iOS
      <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> CoreGraphics;
<span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-keyword">using</span> System.Threading.Tasks;
<span class="highlight-keyword">using</span> UIKit;
<span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer.Discovery;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> SettingsProviderExample : UIViewController {

    <span class="highlight-keyword">public</span> SettingsProviderExample(IntPtr handle) : <span class="highlight-keyword">base</span>(handle) {
        UIButton testButton = <span class="highlight-keyword">new</span> UIButton(UIButtonType.System) {
            Frame = <span class="highlight-keyword">new</span> CGRect(<span class="highlight-number">25</span>, <span class="highlight-number">25</span>, <span class="highlight-number">300</span>, <span class="highlight-number">150</span>)
        };

        testButton.SetTitle(<span class="highlight-literal">"Run Settings Util Example"</span>, UIControlState.Normal);

        testButton.TouchUpInside += <span class="highlight-keyword">async</span> (sender, e) =&gt; {
            <span class="highlight-keyword">await</span> Task.Run(() =&gt; {
                <span class="highlight-keyword">try</span> {
                    BluetoothDiscoveryHandler discoveryHandler = <span class="highlight-keyword">new</span> BluetoothDiscoveryHandler();
                    BluetoothDiscoverer.FindPrinters(discoveryHandler);

                    <span class="highlight-keyword">while</span> (!discoveryHandler.DiscoveryComplete) {
                        Thread.Sleep(<span class="highlight-number">10</span>);
                    }

                    <span class="highlight-keyword">foreach</span> (DiscoveredPrinter printer <span class="highlight-keyword">in</span> discoveryHandler.DiscoveredPrinters) {
                        Connection connection = printer.GetConnection();
                        <span class="highlight-keyword">try</span> {
                            connection.Open();
                            <span class="highlight-keyword">if</span> (connection.Connected) {
                                DisplaySettings(connection);
                            }
                        } <span class="highlight-keyword">finally</span> {
                            connection.Close();
                        }
                    }
                } <span class="highlight-keyword">catch</span> (Exception ex) {
                    Console.WriteLine(ex.ToString());
                }
            });
        };

        View.AddSubview(testButton);
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> DisplaySettings(Connection connection) {
        ZebraPrinter genericPrinter = ZebraPrinterFactory.GetInstance(connection);
        ZebraPrinterLinkOs linkOsPrinter = ZebraPrinterFactory.CreateLinkOsPrinter(genericPrinter);

        <span class="highlight-keyword">if</span> (linkOsPrinter != <span class="highlight-keyword">null</span>) {
            Console.WriteLine(<span class="highlight-literal">"Available Settings for myDevice"</span>);
            HashSet&lt;<span class="highlight-keyword">string</span>&gt; availableSettings = linkOsPrinter.GetAvailableSettings();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">string</span> setting <span class="highlight-keyword">in</span> availableSettings) {
                Console.WriteLine($<span class="highlight-literal">"{setting}: Range = ({linkOsPrinter.GetSettingRange(setting)})"</span>);
            }

            Console.WriteLine(<span class="highlight-literal">"\nCurrent Setting Values for myDevice"</span>);
            Dictionary&lt;<span class="highlight-keyword">string</span>, <span class="highlight-keyword">string</span>&gt; allSettingValues = linkOsPrinter.GetAllSettingValues();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">string</span> settingName <span class="highlight-keyword">in</span> allSettingValues.Keys) {
                Console.WriteLine($<span class="highlight-literal">"{settingName}:{allSettingValues[settingName]}"</span>);
            }

            <span class="highlight-keyword">string</span> darknessSettingId = <span class="highlight-literal">"print.tone"</span>;
            <span class="highlight-keyword">string</span> newDarknessValue = <span class="highlight-literal">"10.0"</span>;
            <span class="highlight-keyword">if</span> (availableSettings.Contains(darknessSettingId) &amp;&amp;
                linkOsPrinter.IsSettingValid(darknessSettingId, newDarknessValue) &amp;&amp;
                linkOsPrinter.IsSettingReadOnly(darknessSettingId) == <span class="highlight-keyword">false</span>) {
                linkOsPrinter.SetSetting(darknessSettingId, newDarknessValue);
            }

            Console.WriteLine($<span class="highlight-literal">"\nNew {darknessSettingId} Value = {linkOsPrinter.GetSettingValue(darknessSettingId)}"</span>);
        }
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">class</span> BluetoothDiscoveryHandler : DiscoveryHandler {

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> DiscoveryError(<span class="highlight-keyword">string</span> message) {
            Console.WriteLine($<span class="highlight-literal">"An error occurred during discovery: {message}."</span>);
            DiscoveryComplete = <span class="highlight-keyword">true</span>;
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> DiscoveryFinished() {
            DiscoveryComplete = <span class="highlight-keyword">true</span>;
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> FoundPrinter(DiscoveredPrinter printer) {
            DiscoveredPrinters.Add(printer);
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> DiscoveryComplete { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; } = <span class="highlight-keyword">false</span>;

        <span class="highlight-keyword">public</span> List&lt;DiscoveredPrinter&gt; DiscoveredPrinters { <span class="highlight-keyword">get</span>; } = <span class="highlight-keyword">new</span> List&lt;DiscoveredPrinter&gt;();
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="49fd0800-6b6b-8535-ee9a-b6a6cea0f996.htm">Zebra.Sdk.Settings Namespace</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>© 2018 ZIH Corp. All Rights Reserved.</p> </div>
  </body>
</html>