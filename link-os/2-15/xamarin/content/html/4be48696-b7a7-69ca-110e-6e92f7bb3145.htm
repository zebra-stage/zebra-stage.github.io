<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>CertificateParser Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="CertificateParser class" />
    <meta name="System.Keywords" content="Zebra.Sdk.Certificate.CertificateParser class" />
    <meta name="Microsoft.Help.F1" content="Zebra.Sdk.Certificate.CertificateParser" />
    <meta name="Microsoft.Help.Id" content="T:Zebra.Sdk.Certificate.CertificateParser" />
    <meta name="Description" content="Takes in a certificate file (P12, DER, PEM, etc) and processes it into a ZebraCertificateInfo object which contains the selected certificate, Certificate Authority certificate chain, and private key (if applicable)." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Zebra.Sdk.Certificate" />
    <meta name="file" content="4be48696-b7a7-69ca-110e-6e92f7bb3145" />
    <meta name="guid" content="4be48696-b7a7-69ca-110e-6e92f7bb3145" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Zebra API (build v2.15.2634)<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\c34c1e19-4d4a-431b-9c0e-a98422cef19e.htm" title="Zebra API (build v2.15.2634)" tocid="roottoc">Zebra API (build v2.15.2634)</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/4a02358a-55db-cca3-608a-647c3868a044.htm" title="Namespaces" tocid="4a02358a-55db-cca3-608a-647c3868a044">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/bbc04ff5-eb3d-aa3f-4e2e-92b6da51eec6.htm" title="Zebra.Sdk.Certificate" tocid="bbc04ff5-eb3d-aa3f-4e2e-92b6da51eec6">Zebra.Sdk.Certificate</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/4be48696-b7a7-69ca-110e-6e92f7bb3145.htm" title="CertificateParser Class" tocid="4be48696-b7a7-69ca-110e-6e92f7bb3145">CertificateParser Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/9de6ef16-cbea-f960-c2df-9a0a67fc1440.htm" title="CertificateParser Constructor " tocid="9de6ef16-cbea-f960-c2df-9a0a67fc1440">CertificateParser Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/098c638c-92df-0eaa-5373-2893acdf2400.htm" title="CertificateParser Methods" tocid="098c638c-92df-0eaa-5373-2893acdf2400">CertificateParser Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="titleColumn">
              <h1>CertificateParser Class</h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
      Takes in a certificate file (P12, DER, PEM, etc) and processes it into a ZebraCertificateInfo object which contains 
      the selected certificate, Certificate Authority certificate chain, and private key (if applicable).
    </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LST5C645F6F_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5C645F6F_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Zebra.Sdk.Certificate<span id="LST5C645F6F_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5C645F6F_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>CertificateParser</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="bbc04ff5-eb3d-aa3f-4e2e-92b6da51eec6.htm">Zebra.Sdk.Certificate</a><br />
    <strong>Assembly:</strong>
   SdkApi.Core (in SdkApi.Core.dll) Version: 2.15.2634<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1ECCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','cs','1','3');return false;">C#</a></div><div id="ID1ECCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','vb','2','3');return false;">VB</a></div><div id="ID1ECCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','cpp','3','3');return false;">C++</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1ECCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID1ECCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">CertificateParser</span></pre></div><div id="ID1ECCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">CertificateParser</span></pre></div><div id="ID1ECCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">CertificateParser</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1ECCA");</script></div><p>The <span class="selflink">CertificateParser</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="9de6ef16-cbea-f960-c2df-9a0a67fc1440.htm">CertificateParser</a></td><td><div class="summary">Initializes a new instance of the <span class="selflink">CertificateParser</span> class</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/bsc2ak47" target="_blank">Equals</a></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/zdee4b3y" target="_blank">GetHashCode</a></td><td><div class="summary">Serves as the default hash function. </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/dfwy45w9" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="http://msdn2.microsoft.com/en-us/library/42892f65" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="9186287f-6e72-03cd-7cfb-09de67cad6a8.htm">ParseCertificate</a></td><td><div class="summary">
            Takes in a certificate file (P12, DER, PEM, etc) and processes it into a ZebraCertificateInfo object which contains
            the selected certificate, Certificate Authority certificate chain, and private key (if applicable).
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/7bxwbwt2" target="_blank">ToString</a></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID5RBSection" class="collapsibleSection">
      Desktop
      <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAACBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAACBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAACBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.IO;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> Zebra.Sdk.Certificate;
<span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CertificateParserExample {

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> PRIV_KEY_BASE_FILE_NAME = <span class="highlight-literal">"PRIVKEY.NRD"</span>;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> CA_CERT_BASE_FILE_NAME = <span class="highlight-literal">"CACERTSV.NRD"</span>;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> CLIENT_CERT_BASE_FILE_NAME = <span class="highlight-literal">"CERTCLN.NRD"</span>;

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args) {
        <span class="highlight-keyword">string</span> path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
        <span class="highlight-keyword">string</span> p12File = Path.Combine(path, <span class="highlight-literal">"certificate.p12"</span>);
        <span class="highlight-keyword">string</span> password = <span class="highlight-literal">"passwordForCertFile"</span>;

        FileInfo certFile = <span class="highlight-keyword">new</span> FileInfo(p12File);
        <span class="highlight-keyword">if</span> (!certFile.Exists) {
            Console.WriteLine($<span class="highlight-literal">"The provided certificate file ({p12File}) cannot be found."</span>);
            <span class="highlight-keyword">return</span>;
        }

        Console.WriteLine($<span class="highlight-literal">"Accessing certificate file {certFile.FullName}"</span>);

        Connection connection = <span class="highlight-keyword">new</span> TcpConnection(<span class="highlight-literal">"1.2.3.4"</span>, <span class="highlight-number">9100</span>);
        ZebraPrinterLinkOs printer = <span class="highlight-keyword">null</span>;

        <span class="highlight-keyword">try</span> {
            connection.Open();
            printer = ZebraPrinterFactory.GetLinkOsPrinter(connection);

            <span class="highlight-keyword">using</span> (FileStream certStream = <span class="highlight-keyword">new</span> FileStream(certFile.FullName, FileMode.Open)) {
                ZebraCertificateInfo myCertificateInfo = CertificateParser.ParseCertificate(certStream, <span class="highlight-keyword">null</span>, password);

                <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != myCertificateInfo &amp;&amp; printer != <span class="highlight-keyword">null</span>) {
                    <span class="highlight-keyword">if</span> (myCertificateInfo.PrivateKey != <span class="highlight-keyword">null</span>) {
                        <span class="highlight-keyword">string</span> tempPath = Path.Combine(path, PRIV_KEY_BASE_FILE_NAME);
                        <span class="highlight-keyword">try</span> {
                            <span class="highlight-keyword">using</span> (FileStream fs = <span class="highlight-keyword">new</span> FileStream(tempPath, FileMode.Create)) {
                                <span class="highlight-keyword">byte</span>[] privateKey = Encoding.UTF8.GetBytes(myCertificateInfo.PrivateKey);
                                fs.Write(privateKey, <span class="highlight-number">0</span>, privateKey.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } <span class="highlight-keyword">finally</span> {
                            File.Delete(tempPath);
                        }
                    }

                    <span class="highlight-keyword">if</span> (myCertificateInfo.ClientCertificate != <span class="highlight-keyword">null</span>) {
                        <span class="highlight-keyword">string</span> tempPath = Path.Combine(path, CLIENT_CERT_BASE_FILE_NAME);
                        <span class="highlight-keyword">try</span> {
                            <span class="highlight-keyword">using</span> (FileStream fs = <span class="highlight-keyword">new</span> FileStream(tempPath, FileMode.Create)) {
                                <span class="highlight-keyword">byte</span>[] clientCertificate = Encoding.UTF8.GetBytes(myCertificateInfo.ClientCertificate);
                                fs.Write(clientCertificate, <span class="highlight-number">0</span>, clientCertificate.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } <span class="highlight-keyword">finally</span> {
                            File.Delete(tempPath);
                        }
                    }

                    <span class="highlight-keyword">if</span> (myCertificateInfo.GetCaChain() != <span class="highlight-keyword">null</span>) {
                        <span class="highlight-keyword">string</span> tempPath = Path.Combine(path, CA_CERT_BASE_FILE_NAME);
                        <span class="highlight-keyword">try</span> {
                            <span class="highlight-keyword">using</span> (FileStream fs = <span class="highlight-keyword">new</span> FileStream(tempPath, FileMode.Create)) {
                                <span class="highlight-keyword">byte</span>[] caChain = Encoding.UTF8.GetBytes(myCertificateInfo.GetCaChain());
                                fs.Write(caChain, <span class="highlight-number">0</span>, caChain.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } <span class="highlight-keyword">finally</span> {
                            File.Delete(tempPath);
                        }
                    }
                }
            }

            printer.ResetNetwork();
        } <span class="highlight-keyword">catch</span> (Exception e) {
            Console.WriteLine($<span class="highlight-literal">"Error while setting up certificates: {e.Message}"</span>);
        } <span class="highlight-keyword">finally</span> {
            <span class="highlight-keyword">if</span> (connection != <span class="highlight-keyword">null</span>) {
                connection.Close();
            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAACBA");</script></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID6RBSection" class="collapsibleSection">
      Android™
      <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Android.App;
<span class="highlight-keyword">using</span> Android.OS;
<span class="highlight-keyword">using</span> Android.Views;
<span class="highlight-keyword">using</span> Android.Widget;
<span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.IO;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> System.Threading.Tasks;
<span class="highlight-keyword">using</span> Zebra.Sdk.Certificate;
<span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CertificateParserExample : Activity {

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> PRIV_KEY_BASE_FILE_NAME = <span class="highlight-literal">"PRIVKEY.NRD"</span>;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> CA_CERT_BASE_FILE_NAME = <span class="highlight-literal">"CACERTSV.NRD"</span>;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> CLIENT_CERT_BASE_FILE_NAME = <span class="highlight-literal">"CERTCLN.NRD"</span>;

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> <span class="highlight-keyword">string</span> path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments);

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnCreate(Bundle savedInstanceState) {
        <span class="highlight-keyword">base</span>.OnCreate(savedInstanceState);

        LinearLayout layout = (LinearLayout)View.Inflate(<span class="highlight-keyword">this</span>, Android.Resource.Layout.ActivityListItem, <span class="highlight-keyword">null</span>);
        layout.Orientation = Orientation.Vertical;

        Button testButton = <span class="highlight-keyword">new</span> Button(<span class="highlight-keyword">this</span>) {
            Text = <span class="highlight-literal">"Run Certificate Parser Example"</span>,
            LayoutParameters = <span class="highlight-keyword">new</span> ViewGroup.LayoutParams(<span class="highlight-keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.WrapContent, ViewGroup.LayoutParams.WrapContent))
        };
        layout.AddView(testButton);

        SetContentView(layout);

        testButton.Click += <span class="highlight-keyword">async</span> (sender, e) =&gt; {
            <span class="highlight-keyword">await</span> Task.Run(() =&gt; {
                <span class="highlight-keyword">string</span> ipAddress = <span class="highlight-literal">"1.2.3.4"</span>;
                <span class="highlight-keyword">string</span> p12File = Path.Combine(path, <span class="highlight-literal">"certificate.p12"</span>);
                <span class="highlight-keyword">string</span> password = <span class="highlight-literal">"passwordForCertFile"</span>;

                ParseCertificate(ipAddress, p12File, password);
            });
        };
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> ParseCertificate(<span class="highlight-keyword">string</span> ipAddress, <span class="highlight-keyword">string</span> p12File, <span class="highlight-keyword">string</span> password) {
        FileInfo certFile = <span class="highlight-keyword">new</span> FileInfo(p12File);
        <span class="highlight-keyword">if</span> (!certFile.Exists) {
            Console.WriteLine($<span class="highlight-literal">"The provided certificate file ({p12File}) cannot be found."</span>);
            <span class="highlight-keyword">return</span>;
        }

        Console.WriteLine($<span class="highlight-literal">"Accessing certificate file {certFile.FullName}"</span>);

        Connection connection = <span class="highlight-keyword">new</span> TcpConnection(ipAddress, <span class="highlight-number">9100</span>);
        ZebraPrinterLinkOs printer = <span class="highlight-keyword">null</span>;

        <span class="highlight-keyword">try</span> {
            connection.Open();
            printer = ZebraPrinterFactory.GetLinkOsPrinter(connection);

            <span class="highlight-keyword">using</span> (FileStream certStream = <span class="highlight-keyword">new</span> FileStream(certFile.FullName, FileMode.Open)) {
                ZebraCertificateInfo myCertificateInfo = CertificateParser.ParseCertificate(certStream, <span class="highlight-keyword">null</span>, password);

                <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != myCertificateInfo &amp;&amp; printer != <span class="highlight-keyword">null</span>) {
                    <span class="highlight-keyword">if</span> (myCertificateInfo.PrivateKey != <span class="highlight-keyword">null</span>) {
                        <span class="highlight-keyword">string</span> tempPath = Path.Combine(path, PRIV_KEY_BASE_FILE_NAME);
                        <span class="highlight-keyword">try</span> {
                            <span class="highlight-keyword">using</span> (FileStream fs = <span class="highlight-keyword">new</span> FileStream(tempPath, FileMode.Create)) {
                                <span class="highlight-keyword">byte</span>[] privateKey = Encoding.UTF8.GetBytes(myCertificateInfo.PrivateKey);
                                fs.Write(privateKey, <span class="highlight-number">0</span>, privateKey.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } <span class="highlight-keyword">finally</span> {
                            File.Delete(tempPath);
                        }
                    }

                    <span class="highlight-keyword">if</span> (myCertificateInfo.ClientCertificate != <span class="highlight-keyword">null</span>) {
                        <span class="highlight-keyword">string</span> tempPath = Path.Combine(path, CLIENT_CERT_BASE_FILE_NAME);
                        <span class="highlight-keyword">try</span> {
                            <span class="highlight-keyword">using</span> (FileStream fs = <span class="highlight-keyword">new</span> FileStream(tempPath, FileMode.Create)) {
                                <span class="highlight-keyword">byte</span>[] clientCertificate = Encoding.UTF8.GetBytes(myCertificateInfo.ClientCertificate);
                                fs.Write(clientCertificate, <span class="highlight-number">0</span>, clientCertificate.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } <span class="highlight-keyword">finally</span> {
                            File.Delete(tempPath);
                        }
                    }

                    <span class="highlight-keyword">if</span> (myCertificateInfo.GetCaChain() != <span class="highlight-keyword">null</span>) {
                        <span class="highlight-keyword">string</span> tempPath = Path.Combine(path, CA_CERT_BASE_FILE_NAME);
                        <span class="highlight-keyword">try</span> {
                            <span class="highlight-keyword">using</span> (FileStream fs = <span class="highlight-keyword">new</span> FileStream(tempPath, FileMode.Create)) {
                                <span class="highlight-keyword">byte</span>[] caChain = Encoding.UTF8.GetBytes(myCertificateInfo.GetCaChain());
                                fs.Write(caChain, <span class="highlight-number">0</span>, caChain.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } <span class="highlight-keyword">finally</span> {
                            File.Delete(tempPath);
                        }
                    }
                }
            }

            printer.ResetNetwork();
        } <span class="highlight-keyword">catch</span> (Exception e) {
            Console.WriteLine($<span class="highlight-literal">"Error while setting up certificates: {e.Message}"</span>);
        } <span class="highlight-keyword">finally</span> {
            <span class="highlight-keyword">if</span> (connection != <span class="highlight-keyword">null</span>) {
                connection.Close();
            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAABBA");</script></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID7RBSection" class="collapsibleSection">
      iOS
      <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> CoreGraphics;
<span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.IO;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> System.Threading.Tasks;
<span class="highlight-keyword">using</span> UIKit;
<span class="highlight-keyword">using</span> Zebra.Sdk.Certificate;
<span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CertificateParserExample : UIViewController {

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> PRIV_KEY_BASE_FILE_NAME = <span class="highlight-literal">"PRIVKEY.NRD"</span>;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> CA_CERT_BASE_FILE_NAME = <span class="highlight-literal">"CACERTSV.NRD"</span>;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> CLIENT_CERT_BASE_FILE_NAME = <span class="highlight-literal">"CERTCLN.NRD"</span>;

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> <span class="highlight-keyword">string</span> path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);

    <span class="highlight-keyword">public</span> CertificateParserExample(IntPtr handle) : <span class="highlight-keyword">base</span>(handle) {
        UIButton testButton = <span class="highlight-keyword">new</span> UIButton(UIButtonType.System) {
            Frame = <span class="highlight-keyword">new</span> CGRect(<span class="highlight-number">25</span>, <span class="highlight-number">25</span>, <span class="highlight-number">300</span>, <span class="highlight-number">150</span>)
        };

        testButton.SetTitle(<span class="highlight-literal">"Run Certificate Parser Example"</span>, UIControlState.Normal);

        testButton.TouchUpInside += <span class="highlight-keyword">async</span> (sender, e) =&gt; {
            <span class="highlight-keyword">await</span> Task.Run(() =&gt; {
                <span class="highlight-keyword">string</span> ipAddress = <span class="highlight-literal">"1.2.3.4"</span>;
                <span class="highlight-keyword">string</span> p12File = Path.Combine(path, <span class="highlight-literal">"certificate.p12"</span>);
                <span class="highlight-keyword">string</span> password = <span class="highlight-literal">"passwordForCertFile"</span>;

                ParseCertificate(ipAddress, p12File, password);
            });
        };

        View.AddSubview(testButton);
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> ParseCertificate(<span class="highlight-keyword">string</span> ipAddress, <span class="highlight-keyword">string</span> p12File, <span class="highlight-keyword">string</span> password) {
        FileInfo certFile = <span class="highlight-keyword">new</span> FileInfo(p12File);
        <span class="highlight-keyword">if</span> (!certFile.Exists) {
            Console.WriteLine($<span class="highlight-literal">"The provided certificate file ({p12File}) cannot be found."</span>);
            <span class="highlight-keyword">return</span>;
        }

        Console.WriteLine($<span class="highlight-literal">"Accessing certificate file {certFile.FullName}"</span>);

        Connection connection = <span class="highlight-keyword">new</span> TcpConnection(ipAddress, <span class="highlight-number">9100</span>);
        ZebraPrinterLinkOs printer = <span class="highlight-keyword">null</span>;

        <span class="highlight-keyword">try</span> {
            connection.Open();
            printer = ZebraPrinterFactory.GetLinkOsPrinter(connection);

            <span class="highlight-keyword">using</span> (FileStream certStream = <span class="highlight-keyword">new</span> FileStream(certFile.FullName, FileMode.Open)) {
                ZebraCertificateInfo myCertificateInfo = CertificateParser.ParseCertificate(certStream, <span class="highlight-keyword">null</span>, password);

                <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != myCertificateInfo &amp;&amp; printer != <span class="highlight-keyword">null</span>) {
                    <span class="highlight-keyword">if</span> (myCertificateInfo.PrivateKey != <span class="highlight-keyword">null</span>) {
                        <span class="highlight-keyword">string</span> tempPath = Path.Combine(path, PRIV_KEY_BASE_FILE_NAME);
                        <span class="highlight-keyword">try</span> {
                            <span class="highlight-keyword">using</span> (FileStream fs = <span class="highlight-keyword">new</span> FileStream(tempPath, FileMode.Create)) {
                                <span class="highlight-keyword">byte</span>[] privateKey = Encoding.UTF8.GetBytes(myCertificateInfo.PrivateKey);
                                fs.Write(privateKey, <span class="highlight-number">0</span>, privateKey.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } <span class="highlight-keyword">finally</span> {
                            File.Delete(tempPath);
                        }
                    }

                    <span class="highlight-keyword">if</span> (myCertificateInfo.ClientCertificate != <span class="highlight-keyword">null</span>) {
                        <span class="highlight-keyword">string</span> tempPath = Path.Combine(path, CLIENT_CERT_BASE_FILE_NAME);
                        <span class="highlight-keyword">try</span> {
                            <span class="highlight-keyword">using</span> (FileStream fs = <span class="highlight-keyword">new</span> FileStream(tempPath, FileMode.Create)) {
                                <span class="highlight-keyword">byte</span>[] clientCertificate = Encoding.UTF8.GetBytes(myCertificateInfo.ClientCertificate);
                                fs.Write(clientCertificate, <span class="highlight-number">0</span>, clientCertificate.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } <span class="highlight-keyword">finally</span> {
                            File.Delete(tempPath);
                        }
                    }

                    <span class="highlight-keyword">if</span> (myCertificateInfo.GetCaChain() != <span class="highlight-keyword">null</span>) {
                        <span class="highlight-keyword">string</span> tempPath = Path.Combine(path, CA_CERT_BASE_FILE_NAME);
                        <span class="highlight-keyword">try</span> {
                            <span class="highlight-keyword">using</span> (FileStream fs = <span class="highlight-keyword">new</span> FileStream(tempPath, FileMode.Create)) {
                                <span class="highlight-keyword">byte</span>[] caChain = Encoding.UTF8.GetBytes(myCertificateInfo.GetCaChain());
                                fs.Write(caChain, <span class="highlight-number">0</span>, caChain.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } <span class="highlight-keyword">finally</span> {
                            File.Delete(tempPath);
                        }
                    }
                }
            }

            printer.ResetNetwork();
        } <span class="highlight-keyword">catch</span> (Exception e) {
            Console.WriteLine($<span class="highlight-literal">"Error while setting up certificates: {e.Message}"</span>);
        } <span class="highlight-keyword">finally</span> {
            <span class="highlight-keyword">if</span> (connection != <span class="highlight-keyword">null</span>) {
                connection.Close();
            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID8RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="bbc04ff5-eb3d-aa3f-4e2e-92b6da51eec6.htm">Zebra.Sdk.Certificate Namespace</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>© 2018 ZIH Corp. All Rights Reserved.</p> </div>
  </body>
</html>