<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="Microsoft.Help.SelfBranded" content="true" />
    <meta name="Language" content="en-us" />
    <meta name="Microsoft.Help.Locale" content="en-us" />
    <meta name="Microsoft.Help.TopicLocale" content="en-us" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"></script>
    <title>XmlPrinter Class</title>
    <meta name="Title" content="XmlPrinter Class" />
    <meta name="Microsoft.Help.Id" content="T:Zebra.Sdk.Printer.XmlPrinter" />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="System.Keywords" content="Zebra.Sdk.Printer.XmlPrinter class" />
    <meta name="System.Keywords" content="XmlPrinter class" />
    <meta name="Microsoft.Help.F1" content="Zebra.Sdk.Printer.XmlPrinter" />
    <meta name="Microsoft.Help.F1" content="XmlPrinter" />
    <meta name="container" content="Zebra.Sdk.Printer" />
    <meta name="file" content="8026e23d-26d4-5bd2-9f3e-a29cda0e523b" />
    <meta name="guid" content="8026e23d-26d4-5bd2-9f3e-a29cda0e523b" />
    <meta name="Microsoft.Help.Category" content="CSharp" />
    <meta name="Description" content="A class used to print template formats using XML as input." />
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="SetDefaultLanguage('cs');">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div id="PageHeader" class="pageHeader">Zebra API (build v3.0.3271)<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/c34c1e19-4d4a-431b-9c0e-a98422cef19e.htm" title="Zebra API (build v3.0.3271)" tocid="roottoc">Zebra API (build v3.0.3271)</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/80e0efe5-2150-3fac-1721-1a0fe753609f.htm" title="Namespaces" tocid="80e0efe5-2150-3fac-1721-1a0fe753609f">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/1e3e78b3-b3c7-320c-3b01-de4d2e41beaf.htm" title="Zebra.Sdk.Printer" tocid="1e3e78b3-b3c7-320c-3b01-de4d2e41beaf">Zebra.Sdk.Printer</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/8026e23d-26d4-5bd2-9f3e-a29cda0e523b.htm" title="XmlPrinter Class" tocid="8026e23d-26d4-5bd2-9f3e-a29cda0e523b">XmlPrinter Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/6aaaca95-6a49-8404-03ae-367b041bfc6a.htm" title="XmlPrinter Methods" tocid="6aaaca95-6a49-8404-03ae-367b041bfc6a">XmlPrinter Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent">
        <table class="titleTable">
          <tr>
            <td class="titleColumn">
              <h1>Xml<wbr />Printer Class</h1>
            </td>
          </tr>
        </table>
        <div class="summary">
      A class used to print template formats using XML as input.
    </div>
        <div class="collapsibleAreaRegion">
          <span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0">
            <img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span>
        </div>
        <div id="IDDASection" class="collapsibleSection">
          <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST18DE9E02_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a>
          <br />  <span class="selflink">Zebra.Sdk.Printer<span id="LST18DE9E02_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>XmlPrinter</span><br /></div>
        <br />
        <strong>Namespace:</strong> <a href="1e3e78b3-b3c7-320c-3b01-de4d2e41beaf.htm">Zebra.Sdk.Printer</a><br /><strong>Assembly:</strong> SdkApi.Core (in SdkApi.Core.dll) Version: 3.0.3271<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','3');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','3');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','3');return false;">C++</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">XmlPrinter</span></pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">XmlPrinter</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">XmlPrinter</span></pre></div></div></div></div><p>The <span class="selflink">XmlPrinter</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAEA')" onkeypress="SectionExpandCollapse_CheckKey('IDAEA', event)" tabindex="0"><img id="IDAEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDAEASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="6c43ac69-cd2f-6f6d-12a2-c223733c8906.htm">Print(Stream, String, String, Stream)</a></td><td>
            Print template formats using XML as input data.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="d3480d02-1400-bb4f-f3f7-6979ff0df9c7.htm">Print(Stream, String, String, Stream, Boolean)</a></td><td>
            Print template formats using XML as input data with optional running commentary to standard out.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="894413f0-6e9c-8438-5109-d97c35546a98.htm">Print(String, Stream, String, String, Stream)</a></td><td>
            Print template formats using XML as input data to <span class="code">destinationDevice</span>.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="ff9a9af7-3d00-5714-d515-03e8553a3292.htm">Print(String, Stream, String, String, Stream, Boolean)</a></td><td>
            Print template formats using XML as input data to a device with connection string <span class="code">destinationDevice</span>.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDBCSection" class="collapsibleSection"><div id="IDABC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDABC_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDABC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDABC');return false;" title="Copy">Copy</a></div></div><div id="IDABC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.IO;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> XmlPrinterExample {

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args) {
        XmlPrintingExample();
        CnXmlPrintingExample();
    }

    <span class="highlight-comment">/// These examples demonstrate how to use the one-line printing capability of the XmlPrinter class.</span>
    <span class="highlight-comment">///</span>
    <span class="highlight-comment">/// They assume that a ZPL template containing variable fields appropriate to the XML data</span>
    <span class="highlight-comment">/// specified exists on the host device. In this case, a PC with the file named XmlPrinterExampleTemplate.zpl</span>
    <span class="highlight-comment">/// saved at "c:\XmlPrinterExampleTemplate.zpl". The contents of this file should be...</span>
    <span class="highlight-comment">/// </span>
    <span class="highlight-comment">/// ^XA^DFXmlExamp.zpl^FS</span>
    <span class="highlight-comment">/// ^A0N,100,100^FO100,100^FN1"Name"^FS</span>
    <span class="highlight-comment">/// ^A0N,100,100^FO100,200^FN2"Street"^FS</span>
    <span class="highlight-comment">/// ^A0N,100,100^FO100,300^FN3"City"^FS</span>
    <span class="highlight-comment">/// ^A0N,100,100^FO100,400^FN4"State"^FS</span>
    <span class="highlight-comment">/// ^A0N,100,100^FO100,500^FN5"Zip"^FS</span>
    <span class="highlight-comment">/// ^XZ</span>
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> XmlPrintingExample() {
        <span class="highlight-comment">// The possible inputs to the one-line XML printing function(s)</span>
        <span class="highlight-keyword">string</span> destinationDevice = <span class="highlight-literal">"192.168.1.32"</span>;

        <span class="highlight-keyword">string</span> templateFilename = <span class="highlight-literal">"c:\\XmlPrinterExampleTemplate.zpl"</span>;
        <span class="highlight-keyword">string</span> defaultQuantityString = <span class="highlight-literal">"1"</span>;
        <span class="highlight-keyword">bool</span> verbose = <span class="highlight-keyword">true</span>;

        <span class="highlight-comment">// If the destination device argument is 'null' then any data that would have been</span>
        <span class="highlight-comment">// sent to a destination device, had one been specified, is captured in 'outputDataStream'.</span>
        <span class="highlight-comment">// This provides a way to test your output and configuration without having an actual</span>
        <span class="highlight-comment">// printer available or without wasting media even if a printer is available.</span>
        Console.WriteLine(<span class="highlight-literal">"\nThe destinationDevice connection string argument is null:"</span>);
        <span class="highlight-keyword">try</span> {
            <span class="highlight-keyword">using</span> (MemoryStream outputDataStream = <span class="highlight-keyword">new</span> MemoryStream()) {
                <span class="highlight-keyword">using</span> (Stream sourceStream = GetSampleXmlData()) {
                    XmlPrinter.Print(<span class="highlight-keyword">null</span>, sourceStream, templateFilename, defaultQuantityString, outputDataStream, verbose);
                    Console.WriteLine(Encoding.UTF8.GetString(outputDataStream.ToArray()));
                }
            }
        } <span class="highlight-keyword">catch</span> (Exception e) {
            Console.WriteLine(e.ToString());
        }

        <span class="highlight-comment">// The outputDataStream argument may be null, in which case the data generated by the XmlPrinter class will</span>
        <span class="highlight-comment">// not be logged but will be sent to the destination device.</span>
        Console.WriteLine(<span class="highlight-literal">"\nThe outputDataStream argument is null:"</span>);
        <span class="highlight-keyword">try</span> {
            <span class="highlight-keyword">using</span> (Stream sourceStream = GetSampleXmlData()) {
                XmlPrinter.Print(destinationDevice, sourceStream, templateFilename, defaultQuantityString, <span class="highlight-keyword">null</span>, verbose);
            }
        } <span class="highlight-keyword">catch</span> (Exception e) {
            Console.WriteLine(e.ToString());
        }

        <span class="highlight-comment">// Both destinationDevice connection string AND outputDataStream arguments may be specified, in which case the</span>
        <span class="highlight-comment">// data generated by the XmlPrinter class will be sent to the destination device and logged to the outputDataStream.</span>
        Console.WriteLine(<span class="highlight-literal">"\nBoth destinationDevice connection string and outputDataStream arguments are specified:"</span>);
        <span class="highlight-keyword">try</span> {
            <span class="highlight-keyword">using</span> (MemoryStream outputDataStream = <span class="highlight-keyword">new</span> MemoryStream()) {
                <span class="highlight-keyword">using</span> (Stream sourceStream = GetSampleXmlData()) {
                    XmlPrinter.Print(destinationDevice, sourceStream, templateFilename, defaultQuantityString, outputDataStream, verbose);
                    Console.WriteLine(Encoding.UTF8.GetString(outputDataStream.ToArray()));
                }
            }
        } <span class="highlight-keyword">catch</span> (Exception e) {
            Console.WriteLine(e.ToString());
        }

        <span class="highlight-comment">// At least one of these two (destinationDevice connection string and outputDataStream) arguments should be specified.</span>
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Stream GetSampleXmlData() {
        <span class="highlight-keyword">string</span> sampleXmlData =
            <span class="highlight-literal">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</span>
                + <span class="highlight-literal">"&lt;file _FORMAT=\"XmlExamp.zpl\"&gt;"</span>
                    + <span class="highlight-literal">" &lt;label&gt;\n"</span>
                        + <span class="highlight-literal">"     &lt;variable name=\"Name\"&gt;John Smith&lt;/variable&gt;"</span>
                        + <span class="highlight-literal">"     &lt;variable name=\"Street\"&gt;1234 Anystreet&lt;/variable&gt;"</span>
                        + <span class="highlight-literal">"     &lt;variable name=\"City\"&gt;Anycity&lt;/variable&gt;"</span>
                        + <span class="highlight-literal">"     &lt;variable name=\"State\"&gt;Anystate&lt;/variable&gt;"</span>
                        + <span class="highlight-literal">"     &lt;variable name=\"Zip\"&gt;12345&lt;/variable&gt;"</span>
                        + <span class="highlight-literal">"  &lt;/label&gt;\n"</span>
                        + <span class="highlight-literal">" &lt;label&gt;\n"</span>
                        + <span class="highlight-literal">"     &lt;variable name=\"Name\"&gt;Jane Doe&lt;/variable&gt;"</span>
                        + <span class="highlight-literal">"     &lt;variable name=\"Street\"&gt;5678 Anyroad&lt;/variable&gt;"</span>
                        + <span class="highlight-literal">"     &lt;variable name=\"City\"&gt;Anytown&lt;/variable&gt;"</span>
                        + <span class="highlight-literal">"     &lt;variable name=\"State\"&gt;Anystate&lt;/variable&gt;"</span>
                        + <span class="highlight-literal">"     &lt;variable name=\"Zip\"&gt;67890&lt;/variable&gt;"</span>
                        + <span class="highlight-literal">"  &lt;/label&gt;\n"</span>
                        + <span class="highlight-literal">"&lt;/file&gt;"</span>;

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> MemoryStream(Encoding.UTF8.GetBytes(sampleXmlData));
    }

    <span class="highlight-comment">/// This example demonstrates how to use the one-line printing capability of the XmlPrinter class.</span>
    <span class="highlight-comment">/// </span>
    <span class="highlight-comment">/// It assume that a ZPL template containing variable fields appropriate to the XML data</span>
    <span class="highlight-comment">/// specified exists on the host device. In this case, a PC with the file named CnXmlPrinterExampleTemplate.zpl</span>
    <span class="highlight-comment">/// saved at "c:\CnXmlPrinterExampleTemplate.zpl". The contents of this file should be...</span>
    <span class="highlight-comment">/// </span>
    <span class="highlight-comment">/// ^XA^DFCnXmlPrinterExampleTemplate.zpl^FS</span>
    <span class="highlight-comment">/// ^A@N,75,75,E:ANMDS.TTF^CI28^FO0,100^FN1"Customer Name"^FS</span>
    <span class="highlight-comment">/// ^A@N,75,75,E:ANMDS.TTF^FO0,200^FN2"Component Name"^FS^</span>
    <span class="highlight-comment">/// ^A@N,75,75,E:ANMDS.TTF^FO0,300^FN3"Vendor Name"^FS</span>
    <span class="highlight-comment">/// ^A@N,75,75,E:ANMDS.TTF^FO0,400^FN4"Vendor ID"^FS</span>
    <span class="highlight-comment">/// ^A@N,75,75,E:ANMDS.TTF^FO0,500^FN5"Invoice Number"^FS</span>
    <span class="highlight-comment">/// ^XZ</span>
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> CnXmlPrintingExample() {
        <span class="highlight-comment">// The possible inputs to the one-line XML printing function(s)</span>
        <span class="highlight-keyword">string</span> destinationDevice = <span class="highlight-literal">"192.168.1.32"</span>;

        <span class="highlight-keyword">string</span> templateFilename = <span class="highlight-literal">"C:\\CnXmlPrinterExampleTemplate.zpl"</span>;
        <span class="highlight-keyword">string</span> defaultQuantityString = <span class="highlight-literal">"1"</span>;
        <span class="highlight-keyword">bool</span> verbose = <span class="highlight-keyword">true</span>;

        <span class="highlight-comment">// The outputDataStream argument may be null, in which case the data generated by the XmlPrinter class will</span>
        <span class="highlight-comment">// not be logged but will be sent to the destination device.</span>
        Console.WriteLine(<span class="highlight-literal">"\nThe outputDataStream argument is null:"</span>);
        <span class="highlight-keyword">try</span> {
            <span class="highlight-keyword">using</span> (Stream sourceStream = GetSampleCnXmlData()) {
                XmlPrinter.Print(destinationDevice, sourceStream, templateFilename, defaultQuantityString, <span class="highlight-keyword">null</span>, verbose);
            }
        } <span class="highlight-keyword">catch</span> (Exception e) {
            Console.WriteLine(e.ToString());
        }
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Stream GetSampleCnXmlData() {
        <span class="highlight-keyword">string</span> sampleXmlData =
            <span class="highlight-literal">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</span>
                + <span class="highlight-literal">"&lt;file _FORMAT=\"XmlExamp.zpl\"&gt;"</span>
                + <span class="highlight-literal">" &lt;label&gt;\n"</span>
                + <span class="highlight-literal">"     &lt;variable name=\"Customer Name\"&gt;东风伟世通汽车饰件系统有限公司&lt;/variable&gt;"</span>
                + <span class="highlight-literal">"     &lt;variable name=\"Component Name\"&gt;驾驶员侧仪表板下装饰件&lt;/variable&gt;"</span>
                + <span class="highlight-literal">"     &lt;variable name=\"Vendor Name\"&gt;供应商名称&lt;/variable&gt;"</span>
                + <span class="highlight-literal">"     &lt;variable name=\"Vendor ID\"&gt;供应商代码&lt;/variable&gt;"</span>
                + <span class="highlight-literal">"     &lt;variable name=\"Invoice Number\"&gt;订单号&lt;/variable&gt;"</span>
                + <span class="highlight-literal">" &lt;/label&gt;\n"</span>
                + <span class="highlight-literal">"&lt;/file&gt;"</span>;

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> MemoryStream(Encoding.UTF8.GetBytes(sampleXmlData));
    }
}</pre></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="1e3e78b3-b3c7-320c-3b01-de4d2e41beaf.htm">Zebra.Sdk.Printer Namespace</a></div></div></div>
    </div>
    <div id="PageFooter" class="pageFooter">
      <p>© 2024 Zebra Technologies Corporation and/or its affiliates. All rights reserved.</p>
    </div>
  </body>
</html>