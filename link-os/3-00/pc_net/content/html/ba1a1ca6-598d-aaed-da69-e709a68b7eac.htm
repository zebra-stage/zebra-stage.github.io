<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="Microsoft.Help.SelfBranded" content="true" />
    <meta name="Language" content="en-us" />
    <meta name="Microsoft.Help.Locale" content="en-us" />
    <meta name="Microsoft.Help.TopicLocale" content="en-us" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"></script>
    <title>ConnectionBuilder Class</title>
    <meta name="Title" content="ConnectionBuilder Class" />
    <meta name="Microsoft.Help.Id" content="T:Zebra.Sdk.Comm.ConnectionBuilder" />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="System.Keywords" content="Zebra.Sdk.Comm.ConnectionBuilder class" />
    <meta name="System.Keywords" content="ConnectionBuilder class" />
    <meta name="Microsoft.Help.F1" content="Zebra.Sdk.Comm.ConnectionBuilder" />
    <meta name="Microsoft.Help.F1" content="ConnectionBuilder" />
    <meta name="container" content="Zebra.Sdk.Comm" />
    <meta name="file" content="ba1a1ca6-598d-aaed-da69-e709a68b7eac" />
    <meta name="guid" content="ba1a1ca6-598d-aaed-da69-e709a68b7eac" />
    <meta name="Microsoft.Help.Category" content="CSharp" />
    <meta name="Description" content="Builds a Connection from a description string. The description string is used to specify a connection to a specific device over TCP or Bluetooth®." />
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="SetDefaultLanguage('cs');">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div id="PageHeader" class="pageHeader">Zebra API (build v3.0.3271)<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/c34c1e19-4d4a-431b-9c0e-a98422cef19e.htm" title="Zebra API (build v3.0.3271)" tocid="roottoc">Zebra API (build v3.0.3271)</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/80e0efe5-2150-3fac-1721-1a0fe753609f.htm" title="Namespaces" tocid="80e0efe5-2150-3fac-1721-1a0fe753609f">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/85823b27-9fa5-7681-c212-8e536f601bbe.htm" title="Zebra.Sdk.Comm" tocid="85823b27-9fa5-7681-c212-8e536f601bbe">Zebra.Sdk.Comm</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ba1a1ca6-598d-aaed-da69-e709a68b7eac.htm" title="ConnectionBuilder Class" tocid="ba1a1ca6-598d-aaed-da69-e709a68b7eac">ConnectionBuilder Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/f9b5d7b6-5b31-29ad-8445-a2151527f0cd.htm" title="ConnectionBuilder Methods" tocid="f9b5d7b6-5b31-29ad-8445-a2151527f0cd">ConnectionBuilder Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent">
        <table class="titleTable">
          <tr>
            <td class="titleColumn">
              <h1>Connection<wbr />Builder Class</h1>
            </td>
          </tr>
        </table>
        <div class="summary">
      Builds a Connection from a description string. The description string is used to specify a connection to a specific
      device over TCP or Bluetooth®.
    </div>
        <div class="collapsibleAreaRegion">
          <span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0">
            <img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span>
        </div>
        <div id="IDDASection" class="collapsibleSection">
          <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST2DE8618E_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a>
          <br />  <span class="selflink">Zebra.Sdk.Comm<span id="LST2DE8618E_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ConnectionBuilder</span><br /></div>
        <br />
        <strong>Namespace:</strong> <a href="85823b27-9fa5-7681-c212-8e536f601bbe.htm">Zebra.Sdk.Comm</a><br /><strong>Assemblies:</strong>  ZebraPrinterSdk (in ZebraPrinterSdk.dll) Version: 3.0.3271<br />  SdkApi.Desktop (in SdkApi.Desktop.dll) Version: 3.0.3271<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','3');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','3');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','3');return false;">C++</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">ConnectionBuilder</span></pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">ConnectionBuilder</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">ConnectionBuilder</span></pre></div></div></div></div><p>The <span class="selflink">ConnectionBuilder</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAEA')" onkeypress="SectionExpandCollapse_CheckKey('IDAEA', event)" tabindex="0"><img id="IDAEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDAEASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="448d1dc1-dc50-cd18-2b35-7629634aa556.htm">AddConnectionType</a></td><td>
            Add a connection type to the ConnectionBuilder.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b6a68020-e8c4-7485-330c-35a1584b31ab.htm">Build</a></td><td>
      Creates a Connection type based on the contents of <span class="code">descriptionString</span>.
    </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection"><p>
        The description string may be of the explicit forms:<br /><br />
        "TCP:192.168.1.4:6101" -- creates a TCP connection to the device with IP address 192.168.1.4 on port 6101.<br />
        "TCP:192.168.1.4" -- creates a TCP connection to the device with IP address 192.168.1.4 on default port 9100.<br />
        "TCP:dnsName:6101" -- creates a TCP connection to the device with 'dnsName' on port 6101.<br />
        "TCP:dnsName" -- creates a TCP connection to the device with 'dnsName' on default port 9100.<br />
        "TCP_MULTI:192.168.1.4" -- creates a Multichannel TCP connection to the device with '192.168.1.4' using the default ports for both the printing channel(9100) and the status channel(9200).<br />
        "TCP_MULTI:192.168.1.4:1234" -- creates a Multichannel TCP connection to the device with '192.168.1.4' using the given port for the printing channel(1234) and the default port for the status channel(9200).<br />
        "TCP_MULTI:192.168.1.4:1234:5678" -- creates a Multichannel TCP connection to the device with '192.168.1.4' using the given ports for the printing channel(1234) and the status channel(5678).<br />
        "TCP_MULTI:dnsName:1234:5678" -- creates a Multichannel TCP connection to the device with 'dnsName' using the given ports for the printing channel(1234) and the status channel(5678).<br />
        "TCP_STATUS:192.168.1.4:1234" -- creates a TCP status only connection to the device with IP address 192.168.1.4 on port 1234.<br />
        "TCP_STATUS:192.168.1.4" -- creates a TCP status only connection to the device with IP address 192.168.1.4 on the default status port 9200.<br />
        "BT:11:22:33:44:55:66" -- creates a Bluetooth® connection to the device using '11:22:33:44:55:66' as the MAC address.<br />
        "BT_MULTI:11:22:33:44:55:66" -- creates a multichannel Bluetooth® connection to the device using '11:22:33:44:55:66' as the MAC address. (Link-OS 2.5 or higher for the status channel)<br />
        "BT_STATUS:11:22:33:44:55:66" -- creates a status only Bluetooth® connection to the device using '11:22:33:44:55:66' as the MAC address. (Link-OS 2.5 or higher)<br />
        "USB:deviceName" – creates a USB connection (through the ZebraDesigner driver) to the device with printer name 'deviceName'<br />
        "USB_DIRECT:deviceName" – creates a USB connection to the device with 'device.unique_id' or 'device.product_name' equal to 'deviceName'*<br /></p>
      Generic text may also be used to attempt to specify a device. For example a description string of "genericText" will
      attempt to connect to a device using the following priority:
      <ul><li>TCP_MULTI</li><li>TCP</li><li>TCP_STATUS</li><li>BT</li></ul>

      If you supply the string '1FE533AA7B90'. This could be interpreted to be either a DNS name or a Bluetooth® MAC
      address. ConnectionBuilder will attempt to connect to this string given the above priority order. If you supply a
      more specific string, such as '192.168.2.3', ConnectionBuilder will more efficiently interpret this string as being
      an IP address and, therefore, only attempt the TCP connections.<br />
      The Bluetooth® Connection Building process will first attempt an insecure connection (no pairing required). This
      requires the printer's 'bluetooth.minimum_security_mode' must be set to 1. If an insecure connection could not be
      esablished, it will attempt to pair and connect securely. This will trigger the Android pairing request prompt.<br />
      Note: Colon (':') characters are not supported in dnsName, friendlyName, uniqueId, deviceName, or genericText fields.<br /><br />
      The following is an example of building a connection from a string.
    </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCC')" onkeypress="SectionExpandCollapse_CheckKey('IDCC', event)" tabindex="0"><img id="IDCCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDCCSection" class="collapsibleSection">
      Desktop
      <div id="IDBCC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBCC_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBCC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBCC');return false;" title="Copy">Copy</a></div></div><div id="IDBCC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer;
<span class="highlight-keyword">using</span> Zebra.Sdk.Printer.Discovery;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ConnectionBuilderExample {

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args) {
        UsbDriverlessTest();

        <span class="highlight-keyword">new</span> ConnectionBuilderExample().NonBlockingStatusReportingOverMultichannel(<span class="highlight-literal">"1.2.3.4"</span>);
        <span class="highlight-keyword">new</span> ConnectionBuilderExample().SendZplOverTcp(<span class="highlight-literal">"1.2.3.4"</span>);
        <span class="highlight-keyword">new</span> ConnectionBuilderExample().SendZplOverUsb(<span class="highlight-literal">"ZDesigner GK420t"</span>);

        <span class="highlight-comment">// Windows 10 only</span>
        <span class="highlight-keyword">new</span> ConnectionBuilderExample().SendZplOverBluetooth(<span class="highlight-literal">"11:22:33:44:55:66"</span>);
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> UsbDriverlessTest() {
        Console.WriteLine(<span class="highlight-literal">"Discovered USB printer list:\r\n"</span>);
        <span class="highlight-keyword">foreach</span> (DiscoveredUsbPrinter printer <span class="highlight-keyword">in</span> UsbDiscoverer.GetZebraUsbPrinters(<span class="highlight-keyword">new</span> ZebraPrinterFilter())) {
            Console.WriteLine(printer);
        }
        Console.WriteLine(<span class="highlight-literal">"End USB printer list\r\n"</span>);

        Connection imz = <span class="highlight-keyword">null</span>;
        <span class="highlight-keyword">try</span> {
            imz = ConnectionBuilder.Build(<span class="highlight-literal">"\\\\?\\usb#vid_0a5f&amp;amp;pid_00f2#imz220#..."</span>);
            imz.Open();

            <span class="highlight-keyword">byte</span>[] hi_return = imz.SendAndWaitForResponse(Encoding.UTF8.GetBytes(<span class="highlight-literal">"~HI"</span>), <span class="highlight-number">5000</span>, <span class="highlight-number">10000</span>, <span class="highlight-literal">"V"</span>);
            Console.WriteLine(Encoding.UTF8.GetString(hi_return));
        } <span class="highlight-keyword">finally</span> {
            <span class="highlight-keyword">if</span> (imz != <span class="highlight-keyword">null</span>) {
                imz.Close();
            }
        }
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> NonBlockingStatusReportingOverMultichannel(<span class="highlight-keyword">string</span> theIpAddress) {
        Connection thePrinterConn = <span class="highlight-keyword">null</span>;
        <span class="highlight-keyword">try</span> {
            <span class="highlight-comment">// Instantiate Multichannel connection for simultaneous printing and status reporting at given address</span>
            thePrinterConn = ConnectionBuilder.Build($<span class="highlight-literal">"TCP_MULTI:{theIpAddress}:9100:9200"</span>);

            <span class="highlight-comment">// Opens the connection - physical connection is established here.</span>
            thePrinterConn.Open();

            <span class="highlight-comment">// Creates a Link-OS printing with the given connection</span>
            ZebraPrinterLinkOs linkOsPrinter = ZebraPrinterFactory.GetLinkOsPrinter(thePrinterConn);

            <span class="highlight-comment">// This is sent over the printing channel (9100 by default) and will block the printing channel until the</span>
            <span class="highlight-comment">// label format is completely sent.</span>
            <span class="highlight-keyword">string</span> labelFormatStartCommand = <span class="highlight-literal">"^XA"</span>;
            linkOsPrinter.SendCommand(labelFormatStartCommand);

            <span class="highlight-keyword">string</span> labelBody = <span class="highlight-literal">"^FO20,20^A0N,25,25^FDThis is a ZPL test.^FS"</span>;
            linkOsPrinter.SendCommand(labelBody);

            <span class="highlight-comment">// This is sent over the status channel (9200 by default) and will return immediately even though the</span>
            <span class="highlight-comment">// printing channel is in use.</span>
            <span class="highlight-comment">// If a TcpConnection were used instead of a MultichannelTcpConnection, this would not be possible.</span>
            PrinterStatus status = linkOsPrinter.GetCurrentStatus();

            Console.WriteLine($<span class="highlight-literal">"The printer PAUSED state is: {status.isPaused}"</span>);

            <span class="highlight-comment">// Send the end of label command to finish and print the label.</span>
            <span class="highlight-keyword">string</span> labelFormatEndCommand = <span class="highlight-literal">"^XZ"</span>;
            linkOsPrinter.SendCommand(labelFormatEndCommand);
        } <span class="highlight-keyword">catch</span> (ConnectionException e) {
            <span class="highlight-comment">// Handle communications error here.</span>
            Console.WriteLine(e.ToString());
        } <span class="highlight-keyword">finally</span> {
            <span class="highlight-comment">// Close the connection to release resources.</span>
            <span class="highlight-keyword">if</span> (thePrinterConn != <span class="highlight-keyword">null</span>) {
                thePrinterConn.Close();
            }
        }
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> SendZplOverTcp(<span class="highlight-keyword">string</span> theIpAddress) {
        Connection thePrinterConn = <span class="highlight-keyword">null</span>;
        <span class="highlight-keyword">try</span> {
            <span class="highlight-comment">// Instantiate connection for ZPL TCP port at given address</span>
            thePrinterConn = ConnectionBuilder.Build($<span class="highlight-literal">"TCP:{theIpAddress}:9100"</span>);

            <span class="highlight-comment">// Open the connection - physical connection is established here.</span>
            thePrinterConn.Open();

            <span class="highlight-comment">// This example prints "This is a ZPL test." near the top of the label.</span>
            <span class="highlight-keyword">string</span> zplData = <span class="highlight-literal">"^XA^FO20,20^A0N,25,25^FDThis is a ZPL test.^FS^XZ"</span>;

            <span class="highlight-comment">// Send the data to printer as a byte array.</span>
            thePrinterConn.Write(Encoding.UTF8.GetBytes(zplData));
        } <span class="highlight-keyword">catch</span> (ConnectionException e) {
            <span class="highlight-comment">// Handle communications error here.</span>
            Console.WriteLine(e.ToString());
        } <span class="highlight-keyword">finally</span> {
            <span class="highlight-comment">// Close the connection to release resources.</span>
            <span class="highlight-keyword">if</span> (thePrinterConn != <span class="highlight-keyword">null</span>) {
                thePrinterConn.Close();
            }
        }
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> SendZplOverUsb(<span class="highlight-keyword">string</span> usbDriverName) {
        Connection thePrinterConn = <span class="highlight-keyword">null</span>;
        <span class="highlight-keyword">try</span> {
            <span class="highlight-comment">// Instantiate USB connection for ZPL printer through its driver</span>
            thePrinterConn = ConnectionBuilder.Build($<span class="highlight-literal">"USB:{usbDriverName}"</span>);

            <span class="highlight-comment">// Open the connection - physical connection is established here.</span>
            thePrinterConn.Open();

            <span class="highlight-comment">// This example prints "This is a ZPL test." near the top of the label.</span>
            <span class="highlight-keyword">string</span> zplData = <span class="highlight-literal">"^XA^FO20,20^A0N,25,25^FDThis is a ZPL test.^FS^XZ"</span>;

            <span class="highlight-comment">// Send the data to printer as a byte array.</span>
            thePrinterConn.Write(Encoding.UTF8.GetBytes(zplData));
        } <span class="highlight-keyword">catch</span> (ConnectionException e) {
            <span class="highlight-comment">// Handle communications error here.</span>
            Console.WriteLine(e.ToString());
        } <span class="highlight-keyword">finally</span> {
            <span class="highlight-comment">// Close the connection to release resources.</span>
            <span class="highlight-keyword">if</span> (thePrinterConn != <span class="highlight-keyword">null</span>) {
                thePrinterConn.Close();
            }
        }
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> SendZplOverBluetooth(<span class="highlight-keyword">string</span> btMacAddress) {
        Connection thePrinterConn = <span class="highlight-keyword">null</span>;
        <span class="highlight-keyword">try</span> {
            <span class="highlight-comment">// Instantiate a Bluetooth connection</span>
            thePrinterConn = ConnectionBuilder.Build($<span class="highlight-literal">"BT:{btMacAddress}"</span>);

            <span class="highlight-comment">// Open the connection - physical connection is established here.</span>
            thePrinterConn.Open();

            <span class="highlight-comment">// This example prints "This is a ZPL test." near the top of the label.</span>
            <span class="highlight-keyword">string</span> zplData = <span class="highlight-literal">"^XA^FO20,20^A0N,25,25^FDThis is a ZPL test.^FS^XZ"</span>;

            <span class="highlight-comment">// Send the data to printer as a byte array.</span>
            thePrinterConn.Write(Encoding.UTF8.GetBytes(zplData));
        } <span class="highlight-keyword">catch</span> (ConnectionException e) {
            <span class="highlight-comment">// Handle communications error here.</span>
            Console.WriteLine(e.ToString());
        } <span class="highlight-keyword">finally</span> {
            <span class="highlight-comment">// Close the connection to release resources.</span>
            <span class="highlight-keyword">if</span> (thePrinterConn != <span class="highlight-keyword">null</span>) {
                thePrinterConn.Close();
            }
        }
    }
}</pre></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="85823b27-9fa5-7681-c212-8e536f601bbe.htm">Zebra.Sdk.Comm Namespace</a></div></div></div>
    </div>
    <div id="PageFooter" class="pageFooter">
      <p>© 2024 Zebra Technologies Corporation and/or its affiliates. All rights reserved.</p>
    </div>
  </body>
</html>