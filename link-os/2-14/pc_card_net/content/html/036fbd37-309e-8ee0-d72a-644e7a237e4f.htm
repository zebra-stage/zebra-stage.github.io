<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>ZebraGraphics Interface</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="ZebraGraphics interface" />
    <meta name="System.Keywords" content="Zebra.Sdk.Card.Graphics.ZebraGraphics interface" />
    <meta name="Microsoft.Help.F1" content="Zebra.Sdk.Card.Graphics.ZebraGraphics" />
    <meta name="Microsoft.Help.Id" content="T:Zebra.Sdk.Card.Graphics.ZebraGraphics" />
    <meta name="Description" content="Interface for Zebra card printer graphics." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Zebra.Sdk.Card.Graphics" />
    <meta name="file" content="036fbd37-309e-8ee0-d72a-644e7a237e4f" />
    <meta name="guid" content="036fbd37-309e-8ee0-d72a-644e7a237e4f" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Zebra API (build v2.14.1989)<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\28f08ed4-7778-403a-9042-a65f86c5abad.htm" title="Zebra API (build v2.14.1989)" tocid="roottoc">Zebra API (build v2.14.1989)</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/182c09de-d6c2-f479-efab-01c78434ea37.htm" title="Namespaces" tocid="182c09de-d6c2-f479-efab-01c78434ea37">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/929867ab-8736-59b4-e7d5-5d0e7b643196.htm" title="Zebra.Sdk.Card.Graphics" tocid="929867ab-8736-59b4-e7d5-5d0e7b643196">Zebra.Sdk.Card.Graphics</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/036fbd37-309e-8ee0-d72a-644e7a237e4f.htm" title="ZebraGraphics Interface" tocid="036fbd37-309e-8ee0-d72a-644e7a237e4f">ZebraGraphics Interface</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/1d2240f8-9f82-f6ff-ed86-181e362964d2.htm" title="ZebraGraphics Properties" tocid="1d2240f8-9f82-f6ff-ed86-181e362964d2">ZebraGraphics Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/6176434e-3434-dbae-c975-eeb039f635e1.htm" title="ZebraGraphics Methods" tocid="6176434e-3434-dbae-c975-eeb039f635e1">ZebraGraphics Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="titleColumn">
              <h1>ZebraGraphics Interface</h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
            Interface for Zebra card printer graphics.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="929867ab-8736-59b4-e7d5-5d0e7b643196.htm">Zebra.Sdk.Card.Graphics</a><br />
    <strong>Assembly:</strong>
   SdkApi_Card_Desktop (in SdkApi_Card_Desktop.dll) Version: 2.14.1989<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0ECCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cpp','3','3');return false;">C++</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="identifier">ZebraGraphics</span> : <span class="identifier">ZebraGraphicsI</span>, 
	<span class="identifier">IDisposable</span></pre></div><div id="ID0ECCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Interface</span> <span class="identifier">ZebraGraphics</span>
	<span class="keyword">Inherits</span> <span class="identifier">ZebraGraphicsI</span>, <span class="identifier">IDisposable</span></pre></div><div id="ID0ECCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface class</span> <span class="identifier">ZebraGraphics</span> : <span class="identifier">ZebraGraphicsI</span>, 
	<span class="identifier">IDisposable</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script></div><p>The <span class="selflink">ZebraGraphics</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID2RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="216b8749-7906-7e60-f071-4efeed39afdb.htm">BrightnessLevel</a></td><td><div class="summary">
            Sets the brightness correction level to be applied during <a href="37102e4e-17fe-997a-63b1-fc3acfeb18d7.htm">CreateImage<span id="LSTE226415D_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_0?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="a71029fc-b2b3-1bea-44d0-f8fb066d639c.htm">ContrastLevel</a></td><td><div class="summary">
            Sets the contrast correction level to be applied during <a href="37102e4e-17fe-997a-63b1-fc3acfeb18d7.htm">CreateImage<span id="LSTE226415D_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_1?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="72043845-0834-9087-4f8e-7626104504f4.htm">GammaLevel</a></td><td><div class="summary">
            Sets the gamma correction level to be applied during <a href="37102e4e-17fe-997a-63b1-fc3acfeb18d7.htm">CreateImage<span id="LSTE226415D_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_2?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="d6f70e95-b3c8-8641-5ab8-2d91efe205e6.htm">MonochromeConverionType</a></td><td><div class="summary">
            Gets or Sets the monochrome conversion type to be used during <a href="37102e4e-17fe-997a-63b1-fc3acfeb18d7.htm">CreateImage<span id="LSTE226415D_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_3?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="9cac7ad4-f232-5a0e-a599-799b18d8e124.htm">PrinterModel</a></td><td><div class="summary">
            Gets or Sets the printer model for use when creating or processing graphic images.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="72505024-6ae0-445f-e695-d23078ace567.htm">SaturationLevel</a></td><td><div class="summary">
            Sets the saturation level to be applied during <a href="37102e4e-17fe-997a-63b1-fc3acfeb18d7.htm">CreateImage<span id="LSTE226415D_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_4?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="2ef49a2c-a3e7-533a-a3f5-9b55f8e759dd.htm">SmoothingMode</a></td><td><div class="summary">
            Gets or sets the quality of the graphics rendering.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="edf90503-d871-f2a4-4113-05f83194db0d.htm">TextContrast</a></td><td><div class="summary">
            Gets or sets the gamma correction level used for rendering text.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="48a3a32d-43ed-00e6-0582-f74787ae586f.htm">TextRenderingHint</a></td><td><div class="summary">
            Gets or sets the quality of the text rendering.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="3fddbb3f-7359-f266-54f8-0cd6b485e0c8.htm">Clear</a></td><td><div class="summary">
            Clears the drawing surface and all user specified parameters.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="37ff3ac1-b128-a71c-723a-a611e36a55c5.htm">Close</a></td><td><div class="summary">
            Releases all resources.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="37102e4e-17fe-997a-63b1-fc3acfeb18d7.htm">CreateImage<span id="LSTE226415D_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_5?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Generates the final bitmap image.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="af9ef81f-950c-fa3f-5628-2ddb02c6df24.htm">CreateImage(String)</a></td><td><div class="summary">
            Generates the final bitmap image.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="d0148ef6-e16b-59fc-d545-28900f987931.htm">CropImage</a></td><td><div class="summary">
            Crops an image to the supplied dimensions.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/es4s3w1d" target="_blank">Dispose</a></td><td><div class="summary">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="3daecb64-1e7c-0ee6-ec72-f6c75ca30d89.htm">DrawEllipse</a></td><td><div class="summary">
            Draws an ellipse at the specified coordinates.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="165506ba-ee46-bc2e-6ec1-e116e631fedf.htm">DrawImage(<span id="LSTE226415D_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_6?cpp=array&lt;");</script>Byte<span id="LSTE226415D_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_7?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Int32, Int32, Int32, Int32, RotationType)</a></td><td><div class="summary">
            Draws the image into the specified rectangle.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="137a1af5-f0db-863b-c859-d5f0d16e2463.htm">DrawImage(<span id="LSTE226415D_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_8?cpp=array&lt;");</script>Byte<span id="LSTE226415D_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_9?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, ImagePosition, Int32, Int32, Single, RotationType)</a></td><td><div class="summary">
            Draws the image at the specified image position in the rectangle.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="79bc2715-ffd8-52d2-1fa2-020f64f45263.htm">DrawImage(<span id="LSTE226415D_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_10?cpp=array&lt;");</script>Byte<span id="LSTE226415D_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_11?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Int32, Int32, Int32, Int32, Single, RotationType)</a></td><td><div class="summary">
            Draws the image into the specified rectangle.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="fa63cecb-a338-883f-2fc6-a267bd90ae9c.htm">DrawLine</a></td><td><div class="summary">
            Draws a line from/to the specified coordinates.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="9c431e2e-a1af-d732-8c35-4a5e1a940871.htm">DrawRectangle</a></td><td><div class="summary">
            Draws a rectangle at the specified coordinates.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="b1ce0f5e-e844-72ee-6ca9-e016123615ee.htm">DrawRoundedRectangle</a></td><td><div class="summary">
            Draws a round-cornered rectangle at the specified coordinates.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="78ace7e8-ce60-d98f-2da7-73433ba5d41d.htm">DrawText(String, Font, Color, Int32, Int32)</a></td><td><div class="summary">
            Draws the text at the specified x and y coordinates.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="d4fb3b3d-63fd-118c-50e8-9fa18ade2c1e.htm">DrawText(String, Font, Color, Int32, Int32, Int32)</a></td><td><div class="summary">
            Draws the text at the specified x and y coordinates and center rotates the text to the specified angle.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="eaad5e1f-257f-8cd9-31e0-f81ed1ae655b.htm">DrawText(String, Font, Color, Int32, Int32, Int32, Int32, Int32)</a></td><td><div class="summary">
            Draws the text into the specified rectangle.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="65f46936-4dd5-079c-7f8c-38e246fc8741.htm">DrawText(String, Font, Color, Int32, Int32, Int32, Int32, Int32, Boolean)</a></td><td><div class="summary">
            Draws the text into the specified rectangle, optionally reducing the size of the font to fit the specified rectangle.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="a4d71509-816e-5955-8156-1abfaaa1565b.htm">DrawText(String, Font, Color, Int32, Int32, Int32, Int32, Int32, TextAlignment, TextAlignment)</a></td><td><div class="summary">
            Draws the text into the specified rectangle using the specified alignments.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="8506308b-a810-7267-a8c2-eaced7de352b.htm">DrawText(String, Font, Color, Int32, Int32, Int32, Int32, Int32, TextAlignment, TextAlignment, Boolean)</a></td><td><div class="summary">
            Draws the text into the specified rectangle using the specified alignments, optionally reducing the size of the font to fit the specified rectangle.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="7962fadf-8a67-4dff-ab87-9e335fcd0dce.htm">ExtractBlackImageData</a></td><td><div class="summary">
            Separates the monochrome and color data from the specified image data using the specified threshold values.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="2cd7980d-c80a-67f5-1def-95f469b34c22.htm">ExtractHalfPanelImageData</a></td><td><div class="summary">
            Attempts to identify and extract the color and non-color half panel regions of the source image.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="20175760-e1b7-1071-69bb-47aaad426861.htm">ImageDataToImage</a></td><td><div class="summary">
            Converts image data to an Image object.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="ac7301f3-f194-178f-298d-5b358969ecca.htm">ImageToImageData</a></td><td><div class="summary">
            Converts an image to a byte array.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="f9b60724-3ae6-dada-8f5c-b3c64bd78fa2.htm">Initialize(Int32, Int32, OrientationType, PrintType, Nullable<span id="LSTE226415D_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_12?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Color<span id="LSTE226415D_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_13?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Initializes the drawing surface.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="df4fb207-865d-5e4e-0fde-c8a84f06bb06.htm">Initialize(Int32, Int32, OrientationType, PrintType, Nullable<span id="LSTE226415D_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_14?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Int32<span id="LSTE226415D_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_15?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Initializes the drawing surface.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="8336670f-3b88-f310-bd24-3cb01bf8b65a.htm">RotateImage(<span id="LSTE226415D_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_16?cpp=array&lt;");</script>Byte<span id="LSTE226415D_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_17?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, RotationType)</a></td><td><div class="summary">
            Rotates the image by the specified <span class="code">rotationType</span>.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="bff70dca-ef57-21d0-1f45-b8d19ef6a0e1.htm">RotateImage(<span id="LSTE226415D_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_18?cpp=array&lt;");</script>Byte<span id="LSTE226415D_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_19?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Int32, Int32, RotationType)</a></td><td><div class="summary">
            Rotates the image by the specified <span class="code">rotationType</span> and then resizes it.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="ec67eff3-ca36-6689-5a4e-6523ab83cfb8.htm">SetColorScale</a></td><td><div class="summary">
            Sets the color scale correction values for red, green, and blue pixel values during <a href="37102e4e-17fe-997a-63b1-fc3acfeb18d7.htm">CreateImage<span id="LSTE226415D_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE226415D_20?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.
            </div> (Inherited from <a href="694b9750-302f-a0e2-8126-9a00ccc59cf9.htm">ZebraGraphicsI</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID4RBSection" class="collapsibleSection">Demonstrates how to print graphics objects utilizing the color, mono, and overlay ribbon panels.
            <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.IO;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Containers;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Enumerations;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Graphics;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Graphics.Barcode;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Graphics.Enumerations;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Printer;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> PrintGraphicsExample {
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> CARD_FEED_TIMEOUT = <span class="highlight-number">30000</span>;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args) {
<span class="highlight-spacer"></span>        Connection connection = <span class="highlight-keyword">null</span>;
<span class="highlight-spacer"></span>        ZebraCardPrinter zebraCardPrinter = <span class="highlight-keyword">null</span>;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>        <span class="highlight-keyword">try</span> {
<span class="highlight-spacer"></span>            connection = <span class="highlight-keyword">new</span> UsbConnection(<span class="highlight-literal">"\\\\?\\usb#vid_0a5f&amp;pid_00a7#411738706#..."</span>);
<span class="highlight-spacer"></span>            connection.Open();
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            zebraCardPrinter = ZebraCardPrinterFactory.GetInstance(connection);
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            List&lt;GraphicsInfo&gt; graphicsData = DrawGraphics(zebraCardPrinter);
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            <span class="highlight-comment">// Send job and poll for status</span>
<span class="highlight-spacer"></span>            <span class="highlight-keyword">int</span> jobId = zebraCardPrinter.Print(<span class="highlight-number">1</span>, graphicsData);
<span class="highlight-spacer"></span>            JobStatusInfo jobStatus = PollJobStatus(jobId, zebraCardPrinter);
<span class="highlight-spacer"></span>            Console.WriteLine($<span class="highlight-literal">"Job {jobId} completed with status '{jobStatus.PrintStatus}'."</span>);
<span class="highlight-spacer"></span>        } <span class="highlight-keyword">catch</span> (Exception e) {
<span class="highlight-spacer"></span>            Console.WriteLine($<span class="highlight-literal">"Error printing graphics: {e.Message}"</span>);
<span class="highlight-spacer"></span>        } <span class="highlight-keyword">finally</span> {
<span class="highlight-spacer"></span>            CloseQuietly(connection, zebraCardPrinter);
<span class="highlight-spacer"></span>        }
<span class="highlight-spacer"></span>    }
<span class="highlight-spacer"></span>
<span id="hrCol40" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp40', 'hrCol40');">+</span><span class="highlight-collapsed">Graphics</span></span><span id="hrExp40" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol40', 'hrExp40');">-</span>    <span class="highlight-preprocessor">#region</span> Graphics
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ConnectionException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="IOException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="NotSupportedException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="System.Security.SecurityException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="UnauthorizedAccessException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> List&lt;GraphicsInfo&gt; DrawGraphics(ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        List&lt;GraphicsInfo&gt; graphicsData = <span class="highlight-keyword">new</span> List&lt;GraphicsInfo&gt;();
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">using</span> (ZebraGraphics graphics = <span class="highlight-keyword">new</span> ZebraCardGraphics(zebraCardPrinter)) {
<span class="highlight-expanded"> </span>            graphicsData.Add(DrawColorImage(graphics, CardSide.Front));
<span class="highlight-expanded"> </span>            graphicsData.Add(DrawMonoImage(graphics, CardSide.Front));
<span class="highlight-expanded"> </span>            graphicsData.Add(DrawOverlayImage(graphics, CardSide.Front));
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> graphicsData;
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> GraphicsInfo DrawColorImage(ZebraGraphics graphics, CardSide side) {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// Color Rectangle and Line - front</span>
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            graphics.Initialize(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, OrientationType.Landscape, PrintType.Color, <span class="highlight-keyword">null</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            graphics.DrawRectangle(<span class="highlight-number">200</span>, <span class="highlight-number">50</span>, <span class="highlight-number">200</span>, <span class="highlight-number">100</span>, <span class="highlight-number">5</span>, Color.Red, <span class="highlight-keyword">null</span>);
<span class="highlight-expanded"> </span>            graphics.DrawRoundedRectangle(<span class="highlight-number">500</span>, <span class="highlight-number">50</span>, <span class="highlight-number">200</span>, <span class="highlight-number">100</span>, <span class="highlight-number">20</span>, <span class="highlight-number">5</span>, Color.Gray, <span class="highlight-keyword">null</span>);
<span class="highlight-expanded"> </span>            graphics.DrawLine(<span class="highlight-keyword">new</span> PointF(<span class="highlight-number">200</span>, <span class="highlight-number">200</span>), <span class="highlight-keyword">new</span> PointF(<span class="highlight-number">700</span>, <span class="highlight-number">200</span>), <span class="highlight-number">5</span>, Color.Blue);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            ZebraCardImageI zebraCardImage = graphics.CreateImage();
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">return</span> AddImage(side, PrintType.Color, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">-1</span>, zebraCardImage);
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">finally</span> {
<span class="highlight-expanded"> </span>            graphics.Clear();
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> GraphicsInfo DrawMonoImage(ZebraGraphics graphics, CardSide side) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// Mono Text and Barcode - front</span>
<span class="highlight-expanded"> </span>            graphics.Initialize(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, OrientationType.Landscape, PrintType.MonoK, <span class="highlight-keyword">null</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">using</span> (Font font = <span class="highlight-keyword">new</span> Font(<span class="highlight-literal">"Arial"</span>, <span class="highlight-number">12</span>)) {
<span class="highlight-expanded"> </span>                graphics.DrawText(<span class="highlight-literal">"Zebra Technologies"</span>, font, Color.Black, <span class="highlight-number">200</span>, <span class="highlight-number">250</span>);
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">using</span> (QRCodeUtil qrCode = ZebraBarcodeFactory.GetQRCode(graphics)) {
<span class="highlight-expanded"> </span>                qrCode.ValueToEncode = <span class="highlight-literal">"https://www.zebra.com"</span>;
<span class="highlight-expanded"> </span>                qrCode.DrawBarcode(<span class="highlight-number">675</span>, <span class="highlight-number">240</span>, <span class="highlight-number">75</span>, <span class="highlight-number">75</span>);
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            ZebraCardImageI zebraCardImage = graphics.CreateImage();
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">return</span> AddImage(side, PrintType.MonoK, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">-1</span>, zebraCardImage);
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">finally</span> {
<span class="highlight-expanded"> </span>            graphics.Clear();
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="IOException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="NotSupportedException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="System.Security.SecurityException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="UnauthorizedAccessException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> GraphicsInfo DrawOverlayImage(ZebraGraphics graphics, CardSide side) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// Overlay Image - front</span>
<span class="highlight-expanded"> </span>            graphics.Initialize(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, OrientationType.Landscape, PrintType.Overlay, <span class="highlight-keyword">null</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> overlayImagePath = <span class="highlight-literal">@"path\to\myOverlayImage.bmp"</span>;
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">byte</span>[] imageData = File.ReadAllBytes(overlayImagePath);
<span class="highlight-expanded"> </span>            graphics.DrawImage(imageData, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, RotationType.RotateNoneFlipNone);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            ZebraCardImageI zebraCardImage = graphics.CreateImage();
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">return</span> AddImage(side, PrintType.Overlay, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">-1</span>, zebraCardImage);
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">finally</span> {
<span class="highlight-expanded"> </span>            graphics.Clear();
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> GraphicsInfo AddImage(CardSide side, PrintType printType, <span class="highlight-keyword">int</span> xOffset, <span class="highlight-keyword">int</span> yOffset, <span class="highlight-keyword">int</span> fillColor, ZebraCardImageI zebraCardImage) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> GraphicsInfo {
<span class="highlight-expanded"> </span>            Side = side,
<span class="highlight-expanded"> </span>            PrintType = printType,
<span class="highlight-expanded"> </span>            GraphicType = zebraCardImage != <span class="highlight-keyword">null</span> ? GraphicType.BMP : GraphicType.NA,
<span class="highlight-expanded"> </span>            XOffset = xOffset,
<span class="highlight-expanded"> </span>            YOffset = yOffset,
<span class="highlight-expanded"> </span>            FillColor = fillColor,
<span class="highlight-expanded"> </span>            Opacity = <span class="highlight-number">0</span>,
<span class="highlight-expanded"> </span>            Overprint = <span class="highlight-keyword">false</span>,
<span class="highlight-expanded"> </span>            GraphicData = zebraCardImage ?? <span class="highlight-keyword">null</span>
<span class="highlight-expanded"> </span>        };
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> Graphics</span>
<span class="highlight-spacer"></span>
<span id="hrCol137" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp137', 'hrCol137');">+</span><span class="highlight-collapsed">JobStatus</span></span><span id="hrExp137" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol137', 'hrExp137');">-</span>    <span class="highlight-preprocessor">#region</span> JobStatus
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ConnectionException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="IOException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="OverflowException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Settings.SettingsException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> JobStatusInfo PollJobStatus(<span class="highlight-keyword">int</span> jobId, ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        JobStatusInfo jobStatusInfo = <span class="highlight-keyword">new</span> JobStatusInfo();
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">bool</span> isFeeding = <span class="highlight-keyword">false</span>;
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">long</span> start = Math.Abs(Environment.TickCount);
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>) {
<span class="highlight-expanded"> </span>            jobStatusInfo = zebraCardPrinter.GetJobStatus(jobId);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (!isFeeding) {
<span class="highlight-expanded"> </span>                start = Math.Abs(Environment.TickCount);
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            isFeeding = jobStatusInfo.CardPosition.Contains(<span class="highlight-literal">"feeding"</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> alarmDesc = jobStatusInfo.AlarmInfo.Value &gt; <span class="highlight-number">0</span> ? $<span class="highlight-literal">" ({jobStatusInfo.AlarmInfo.Description})"</span> : <span class="highlight-literal">""</span>;
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> errorDesc = jobStatusInfo.ErrorInfo.Value &gt; <span class="highlight-number">0</span> ? $<span class="highlight-literal">" ({jobStatusInfo.ErrorInfo.Description})"</span> : <span class="highlight-literal">""</span>;
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            Console.WriteLine($<span class="highlight-literal">"Job {jobId}: status:{jobStatusInfo.PrintStatus}, position:{jobStatusInfo.CardPosition}, alarm:{jobStatusInfo.AlarmInfo.Value}{alarmDesc}, error:{jobStatusInfo.ErrorInfo.Value}{errorDesc}"</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"done_ok"</span>)) {
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">break</span>;
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"error"</span>) || jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"cancelled"</span>)) {
<span class="highlight-expanded"> </span>                Console.WriteLine($<span class="highlight-literal">"The job encountered an error [{jobStatusInfo.ErrorInfo.Description}] and was cancelled."</span>);
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">break</span>;
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.ErrorInfo.Value &gt; <span class="highlight-number">0</span>) {
<span class="highlight-expanded"> </span>                Console.WriteLine($<span class="highlight-literal">"The job encountered an error [{jobStatusInfo.ErrorInfo.Description}] and was cancelled."</span>);
<span class="highlight-expanded"> </span>                zebraCardPrinter.Cancel(jobId);
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"in_progress"</span>) &amp;&amp; isFeeding) {
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">if</span> (Math.Abs(Environment.TickCount) &gt; start + CARD_FEED_TIMEOUT) {
<span class="highlight-expanded"> </span>                    Console.WriteLine(<span class="highlight-literal">"The job timed out waiting for a card and was cancelled."</span>);
<span class="highlight-expanded"> </span>                    zebraCardPrinter.Cancel(jobId);
<span class="highlight-expanded"> </span>                }
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            Thread.Sleep(<span class="highlight-number">1000</span>);
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> jobStatusInfo;
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> JobStatus</span>
<span class="highlight-spacer"></span>
<span id="hrCol184" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp184', 'hrCol184');">+</span><span class="highlight-collapsed">CleanUp</span></span><span id="hrExp184" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol184', 'hrExp184');">-</span>    <span class="highlight-preprocessor">#region</span> CleanUp
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> CloseQuietly(Connection connection, ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (zebraCardPrinter != <span class="highlight-keyword">null</span>) {
<span class="highlight-expanded"> </span>                zebraCardPrinter.Destroy();
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">catch</span> { }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (connection != <span class="highlight-keyword">null</span>) {
<span class="highlight-expanded"> </span>                connection.Close();
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">catch</span> { }
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> CleanUp</span>
<span class="highlight-spacer"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="929867ab-8736-59b4-e7d5-5d0e7b643196.htm">Zebra.Sdk.Card.Graphics Namespace</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>© 2017 ZIH Corp. All Rights Reserved.</p> </div>
  </body>
</html>