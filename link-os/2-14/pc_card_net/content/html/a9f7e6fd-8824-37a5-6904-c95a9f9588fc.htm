<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>JobUtil.Print Method </title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="Print method" />
    <meta name="System.Keywords" content="JobUtil.Print method" />
    <meta name="Microsoft.Help.F1" content="Zebra.Sdk.Card.Job.JobUtil.Print" />
    <meta name="Microsoft.Help.Id" content="M:Zebra.Sdk.Card.Job.JobUtil.Print(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo})" />
    <meta name="Description" content="Prints a card." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Zebra.Sdk.Card.Job" />
    <meta name="file" content="a9f7e6fd-8824-37a5-6904-c95a9f9588fc" />
    <meta name="guid" content="a9f7e6fd-8824-37a5-6904-c95a9f9588fc" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Zebra API (build v2.14.1989)<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\28f08ed4-7778-403a-9042-a65f86c5abad.htm" title="Zebra API (build v2.14.1989)" tocid="roottoc">Zebra API (build v2.14.1989)</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/182c09de-d6c2-f479-efab-01c78434ea37.htm" title="Namespaces" tocid="182c09de-d6c2-f479-efab-01c78434ea37">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/7eb9840d-b278-1055-f4e5-ffcff0b504c3.htm" title="Zebra.Sdk.Card.Job" tocid="7eb9840d-b278-1055-f4e5-ffcff0b504c3">Zebra.Sdk.Card.Job</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/0d80ded4-7fb7-535f-aa84-ad3b90d3e41f.htm" title="JobUtil Interface" tocid="0d80ded4-7fb7-535f-aa84-ad3b90d3e41f">JobUtil Interface</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/71b7c126-7e07-ef61-8cf3-c1cb6619e7c6.htm" title="JobUtil Methods" tocid="71b7c126-7e07-ef61-8cf3-c1cb6619e7c6">JobUtil Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/545794c8-27a7-ab94-c87d-043b56700e5b.htm" title="Cancel Method " tocid="545794c8-27a7-ab94-c87d-043b56700e5b">Cancel Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/37b7ddc5-31ce-5f89-544b-0e56ebc55358.htm" title="Destroy Method " tocid="37b7ddc5-31ce-5f89-544b-0e56ebc55358">Destroy Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/4899273c-d3e3-4fc0-ae35-af7ec0270560.htm" title="EjectCard Method " tocid="4899273c-d3e3-4fc0-ae35-af7ec0270560">EjectCard Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/e832b001-a002-6ab6-f427-8277d7fc222e.htm" title="GetJobList Method " tocid="e832b001-a002-6ab6-f427-8277d7fc222e">GetJobList Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/0e174330-ab6a-6941-abb7-a8a30b301be4.htm" title="GetJobStatus Method " tocid="0e174330-ab6a-6941-abb7-a8a30b301be4">GetJobStatus Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/91792290-d43a-3124-5a0d-591cd1a9fe4e.htm" title="MagEncode Method " tocid="91792290-d43a-3124-5a0d-591cd1a9fe4e">MagEncode Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/4719813f-1b1c-3444-d264-6a2840fc3a3d.htm" title="PositionCard Method " tocid="4719813f-1b1c-3444-d264-6a2840fc3a3d">PositionCard Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/a9f7e6fd-8824-37a5-6904-c95a9f9588fc.htm" title="Print Method " tocid="a9f7e6fd-8824-37a5-6904-c95a9f9588fc">Print Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/d2caa9f5-1176-90a4-d32a-554e5d75afc0.htm" title="PrintAndMagEncode Method " tocid="d2caa9f5-1176-90a4-d32a-554e5d75afc0">PrintAndMagEncode Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/967b6fff-1a30-23a5-0197-76b7378870b1.htm" title="PrintTemplate Method " tocid="967b6fff-1a30-23a5-0197-76b7378870b1">PrintTemplate Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/81323628-ec5f-dec9-e139-47d27184a634.htm" title="ReadMagData Method " tocid="81323628-ec5f-dec9-e139-47d27184a634">ReadMagData Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/3191b2bf-a9f6-86a3-d6b7-aa4563a0467c.htm" title="Reprint Method " tocid="3191b2bf-a9f6-86a3-d6b7-aa4563a0467c">Reprint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/334146c5-600a-91d8-285a-9f24779ff3fc.htm" title="Resume Method " tocid="334146c5-600a-91d8-285a-9f24779ff3fc">Resume Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/f1858fea-8b4e-5519-f066-819b4f144e51.htm" title="SmartCardEncode Method " tocid="f1858fea-8b4e-5519-f066-819b4f144e51">SmartCardEncode Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="titleColumn">
              <h1>JobUtil<span id="LST6861B4A7_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6861B4A7_0?cpp=::|nu=.");</script>Print Method </h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
            Prints a card.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="7eb9840d-b278-1055-f4e5-ffcff0b504c3.htm">Zebra.Sdk.Card.Job</a><br />
    <strong>Assembly:</strong>
   SdkApi_Card_Core (in SdkApi_Card_Core.dll) Version: 2.14.1989<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0ECCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cpp','3','3');return false;">C++</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="identifier">int</span> <span class="identifier">Print</span>(
	<span class="identifier">int</span> <span class="parameter">copies</span>,
	<span class="identifier">List</span>&lt;<span class="identifier">GraphicsInfo</span>&gt; <span class="parameter">graphicsData</span>
)</pre></div><div id="ID0ECCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Function</span> <span class="identifier">Print</span> ( 
	<span class="parameter">copies</span> <span class="keyword">As</span> <span class="identifier">Integer</span>,
	<span class="parameter">graphicsData</span> <span class="keyword">As</span> <span class="identifier">List</span>(<span class="keyword">Of</span> <span class="identifier">GraphicsInfo</span>)
) <span class="keyword">As</span> <span class="identifier">Integer</span></pre></div><div id="ID0ECCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="identifier">int</span> <span class="identifier">Print</span>(
	<span class="identifier">int</span> <span class="parameter">copies</span>, 
	<span class="identifier">List</span>&lt;<span class="identifier">GraphicsInfo</span>^&gt;^ <span class="parameter">graphicsData</span>
)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">copies</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">System<span id="LST6861B4A7_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6861B4A7_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Int32</a><br />The number of copies to be printed.</dd><dt><span class="parameter">graphicsData</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/6sh2ey19" target="_blank">System.Collections.Generic<span id="LST6861B4A7_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6861B4A7_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>List</a><span id="LST6861B4A7_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6861B4A7_3?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="55c93706-853a-a8fb-6026-6d506a16713a.htm">GraphicsInfo</a><span id="LST6861B4A7_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6861B4A7_4?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />A <span class="code">List</span> containing details of the images to be printed.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">Int32</a><br />The assigned job ID number.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="tableSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="3c2cfe78-466e-3c50-8ad5-48304fef5956.htm">ConnectionException</a></td><td>If the device is busy or there is an error communicating with the printer.</td></tr><tr><td><a href="1fca04cb-e649-aa04-dae1-d11624592275.htm">SettingsException</a></td><td>If there is an error with the job settings.</td></tr><tr><td><a href="ecdb3e25-4c7e-545f-04c1-9217a4ac0355.htm">ZebraCardException</a></td><td>If a printer error occurs or there is an error creating the job.</td></tr><tr><td><a href="0a351c6a-de3b-a70e-9ef6-9584b711c96d.htm">ZebraIllegalArgumentException</a></td><td>If <span class="code">copies</span> or <span class="code">graphicsData</span> are invalid or an error occurs while building the job.</td></tr></table></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID3RBSection" class="collapsibleSection">Demonstrates how to print a color image with full overlay on the front side of the card and a monochrome image on the back.
            <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.IO;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Containers;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Enumerations;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Graphics;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Graphics.Enumerations;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Job;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Printer;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> PrintYMCKOExample {
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> CARD_FEED_TIMEOUT = <span class="highlight-number">30000</span>;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args) {
<span class="highlight-spacer"></span>        Connection connection = <span class="highlight-keyword">null</span>;
<span class="highlight-spacer"></span>        ZebraCardPrinter zebraCardPrinter = <span class="highlight-keyword">null</span>;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>        <span class="highlight-keyword">try</span> {
<span class="highlight-spacer"></span>            connection = <span class="highlight-keyword">new</span> TcpConnection(<span class="highlight-literal">"1.2.3.4"</span>, <span class="highlight-number">9100</span>);
<span class="highlight-spacer"></span>            connection.Open();
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            zebraCardPrinter = ZebraCardPrinterFactory.GetInstance(connection);
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            List&lt;GraphicsInfo&gt; graphicsData = DrawGraphics(zebraCardPrinter);
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            <span class="highlight-comment">// Set the card source</span>
<span class="highlight-spacer"></span>            zebraCardPrinter.SetJobSetting(ZebraCardJobSettingNames.CARD_SOURCE, <span class="highlight-literal">"Feeder"</span>); <span class="highlight-comment">// Feeder=default</span>
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            <span class="highlight-comment">// Set the card destination - If the destination value is not specifically set, it will be auto set to the most appropriate value</span>
<span class="highlight-spacer"></span>            <span class="highlight-keyword">if</span> (zebraCardPrinter.HasLaminator()) {
<span class="highlight-spacer"></span>                zebraCardPrinter.SetJobSetting(ZebraCardJobSettingNames.CARD_DESTINATION, <span class="highlight-literal">"LaminatorAny"</span>);
<span class="highlight-spacer"></span>            } <span class="highlight-keyword">else</span> {
<span class="highlight-spacer"></span>                zebraCardPrinter.SetJobSetting(ZebraCardJobSettingNames.CARD_DESTINATION, <span class="highlight-literal">"Eject"</span>);
<span class="highlight-spacer"></span>            }
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            <span class="highlight-comment">// Send job</span>
<span class="highlight-spacer"></span>            <span class="highlight-keyword">int</span> jobId = zebraCardPrinter.Print(<span class="highlight-number">1</span>, graphicsData);
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            <span class="highlight-comment">// Poll job status</span>
<span class="highlight-spacer"></span>            JobStatusInfo jobStatus = PollJobStatus(jobId, zebraCardPrinter);
<span class="highlight-spacer"></span>            Console.WriteLine($<span class="highlight-literal">"Job {jobId} completed with status '{jobStatus.PrintStatus}'."</span>);
<span class="highlight-spacer"></span>        } <span class="highlight-keyword">catch</span> (Exception e) {
<span class="highlight-spacer"></span>            Console.WriteLine($<span class="highlight-literal">"Error printing image: {e.Message}"</span>);
<span class="highlight-spacer"></span>        } <span class="highlight-keyword">finally</span> {
<span class="highlight-spacer"></span>            CloseQuietly(connection, zebraCardPrinter);
<span class="highlight-spacer"></span>        }
<span class="highlight-spacer"></span>    }
<span class="highlight-spacer"></span>
<span id="hrCol52" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp52', 'hrCol52');">+</span><span class="highlight-collapsed">Graphics</span></span><span id="hrExp52" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol52', 'hrExp52');">-</span>    <span class="highlight-preprocessor">#region</span> Graphics
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ConnectionException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="IOException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="NotSupportedException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="System.Security.SecurityException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="UnauthorizedAccessException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> List&lt;GraphicsInfo&gt; DrawGraphics(ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// Generate image data</span>
<span class="highlight-expanded"> </span>        ZebraCardImageI zebraCardImage = <span class="highlight-keyword">null</span>;
<span class="highlight-expanded"> </span>        List&lt;GraphicsInfo&gt; graphicsData = <span class="highlight-keyword">new</span> List&lt;GraphicsInfo&gt;();
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">using</span> (ZebraGraphics graphics = <span class="highlight-keyword">new</span> ZebraCardGraphics(zebraCardPrinter)) {
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// Front side color</span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> colorImagePath = <span class="highlight-literal">@"path\to\myColorImage.bmp"</span>;
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">byte</span>[] imageData = File.ReadAllBytes(colorImagePath);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            zebraCardImage = DrawImage(graphics, PrintType.Color, imageData, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
<span class="highlight-expanded"> </span>            graphicsData.Add(AddImage(CardSide.Front, PrintType.Color, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">-1</span>, zebraCardImage));
<span class="highlight-expanded"> </span>            graphics.Clear();
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// Front side full overlay</span>
<span class="highlight-expanded"> </span>            graphicsData.Add(AddImage(CardSide.Front, PrintType.Overlay, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-keyword">null</span>));
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// Back side mono</span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> monoImagePath = <span class="highlight-literal">@"path\to\myMonoImage.bmp"</span>;
<span class="highlight-expanded"> </span>            imageData = File.ReadAllBytes(monoImagePath);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            zebraCardImage = DrawImage(graphics, PrintType.MonoK, imageData, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
<span class="highlight-expanded"> </span>            graphicsData.Add(AddImage(CardSide.Back, PrintType.MonoK, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">-1</span>, zebraCardImage));
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> graphicsData;
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> ZebraCardImageI DrawImage(ZebraGraphics graphics, PrintType printType, <span class="highlight-keyword">byte</span>[] imageData, <span class="highlight-keyword">int</span> xOffset, <span class="highlight-keyword">int</span> yOffset, <span class="highlight-keyword">int</span> width, <span class="highlight-keyword">int</span> height) {
<span class="highlight-expanded"> </span>        graphics.Initialize(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, OrientationType.Landscape, printType, Color.White);
<span class="highlight-expanded"> </span>        graphics.DrawImage(imageData, xOffset, yOffset, width, height, RotationType.RotateNoneFlipNone);
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> graphics.CreateImage();
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> GraphicsInfo AddImage(CardSide side, PrintType printType, <span class="highlight-keyword">int</span> xOffset, <span class="highlight-keyword">int</span> yOffset, <span class="highlight-keyword">int</span> fillColor, ZebraCardImageI zebraCardImage) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> GraphicsInfo {
<span class="highlight-expanded"> </span>            Side = side,
<span class="highlight-expanded"> </span>            PrintType = printType,
<span class="highlight-expanded"> </span>            GraphicType = zebraCardImage != <span class="highlight-keyword">null</span> ? GraphicType.BMP : GraphicType.NA,
<span class="highlight-expanded"> </span>            XOffset = xOffset,
<span class="highlight-expanded"> </span>            YOffset = yOffset,
<span class="highlight-expanded"> </span>            FillColor = fillColor,
<span class="highlight-expanded"> </span>            Opacity = <span class="highlight-number">0</span>,
<span class="highlight-expanded"> </span>            Overprint = <span class="highlight-keyword">false</span>,
<span class="highlight-expanded"> </span>            GraphicData = zebraCardImage ?? <span class="highlight-keyword">null</span>
<span class="highlight-expanded"> </span>        };
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> Graphics</span>
<span class="highlight-spacer"></span>
<span id="hrCol109" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp109', 'hrCol109');">+</span><span class="highlight-collapsed">JobStatus</span></span><span id="hrExp109" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol109', 'hrExp109');">-</span>    <span class="highlight-preprocessor">#region</span> JobStatus
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ConnectionException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="IOException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="OverflowException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Settings.SettingsException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> JobStatusInfo PollJobStatus(<span class="highlight-keyword">int</span> jobId, ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        JobStatusInfo jobStatusInfo = <span class="highlight-keyword">new</span> JobStatusInfo();
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">bool</span> isFeeding = <span class="highlight-keyword">false</span>;
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">long</span> start = Math.Abs(Environment.TickCount);
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>) {
<span class="highlight-expanded"> </span>            jobStatusInfo = zebraCardPrinter.GetJobStatus(jobId);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (!isFeeding) {
<span class="highlight-expanded"> </span>                start = Math.Abs(Environment.TickCount);
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            isFeeding = jobStatusInfo.CardPosition.Contains(<span class="highlight-literal">"feeding"</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> alarmDesc = jobStatusInfo.AlarmInfo.Value &gt; <span class="highlight-number">0</span> ? $<span class="highlight-literal">" ({jobStatusInfo.AlarmInfo.Description})"</span> : <span class="highlight-literal">""</span>;
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> errorDesc = jobStatusInfo.ErrorInfo.Value &gt; <span class="highlight-number">0</span> ? $<span class="highlight-literal">" ({jobStatusInfo.ErrorInfo.Description})"</span> : <span class="highlight-literal">""</span>;
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            Console.WriteLine($<span class="highlight-literal">"Job {jobId}: status:{jobStatusInfo.PrintStatus}, position:{jobStatusInfo.CardPosition}, alarm:{jobStatusInfo.AlarmInfo.Value}{alarmDesc}, error:{jobStatusInfo.ErrorInfo.Value}{errorDesc}"</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"done_ok"</span>)) {
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">break</span>;
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"error"</span>) || jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"cancelled"</span>)) {
<span class="highlight-expanded"> </span>                Console.WriteLine($<span class="highlight-literal">"The job encountered an error [{jobStatusInfo.ErrorInfo.Description}] and was cancelled."</span>);
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">break</span>;
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.ErrorInfo.Value &gt; <span class="highlight-number">0</span>) {
<span class="highlight-expanded"> </span>                Console.WriteLine($<span class="highlight-literal">"The job encountered an error [{jobStatusInfo.ErrorInfo.Description}] and was cancelled."</span>);
<span class="highlight-expanded"> </span>                zebraCardPrinter.Cancel(jobId);
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"in_progress"</span>) &amp;&amp; isFeeding) {
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">if</span> (Math.Abs(Environment.TickCount) &gt; start + CARD_FEED_TIMEOUT) {
<span class="highlight-expanded"> </span>                    Console.WriteLine(<span class="highlight-literal">"The job timed out waiting for a card and was cancelled."</span>);
<span class="highlight-expanded"> </span>                    zebraCardPrinter.Cancel(jobId);
<span class="highlight-expanded"> </span>                }
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            Thread.Sleep(<span class="highlight-number">1000</span>);
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> jobStatusInfo;
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> JobStatus</span>
<span class="highlight-spacer"></span>
<span id="hrCol156" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp156', 'hrCol156');">+</span><span class="highlight-collapsed">CleanUp</span></span><span id="hrExp156" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol156', 'hrExp156');">-</span>    <span class="highlight-preprocessor">#region</span> CleanUp
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> CloseQuietly(Connection connection, ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (zebraCardPrinter != <span class="highlight-keyword">null</span>) {
<span class="highlight-expanded"> </span>                zebraCardPrinter.Destroy();
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">catch</span> { }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (connection != <span class="highlight-keyword">null</span>) {
<span class="highlight-expanded"> </span>                connection.Close();
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">catch</span> { }
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> CleanUp</span>
<span class="highlight-spacer"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID4RBSection" class="collapsibleSection">Demonstrates how to print a monochrome image on the back side of the card.
            <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.IO;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Containers;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Enumerations;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Graphics;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Graphics.Enumerations;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Card.Printer;
<span class="highlight-spacer"></span><span class="highlight-keyword">using</span> Zebra.Sdk.Comm;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> PrintMonoExample {
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> CARD_FEED_TIMEOUT = <span class="highlight-number">30000</span>;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args) {
<span class="highlight-spacer"></span>        Connection connection = <span class="highlight-keyword">null</span>;
<span class="highlight-spacer"></span>        ZebraCardPrinter zebraCardPrinter = <span class="highlight-keyword">null</span>;
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>        <span class="highlight-keyword">try</span> {
<span class="highlight-spacer"></span>            connection = <span class="highlight-keyword">new</span> TcpConnection(<span class="highlight-literal">"1.2.3.4"</span>, <span class="highlight-number">9100</span>);
<span class="highlight-spacer"></span>            connection.Open();
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            zebraCardPrinter = ZebraCardPrinterFactory.GetInstance(connection);
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            List&lt;GraphicsInfo&gt; graphicsData = DrawGraphics(zebraCardPrinter);
<span class="highlight-spacer"></span>
<span class="highlight-spacer"></span>            <span class="highlight-comment">// Send job and poll for status</span>
<span class="highlight-spacer"></span>            <span class="highlight-keyword">int</span> jobId = zebraCardPrinter.Print(<span class="highlight-number">1</span>, graphicsData);
<span class="highlight-spacer"></span>            JobStatusInfo jobStatus = PollJobStatus(jobId, zebraCardPrinter);
<span class="highlight-spacer"></span>            Console.WriteLine($<span class="highlight-literal">"Job {jobId} completed with status '{jobStatus.PrintStatus}'."</span>);
<span class="highlight-spacer"></span>        } <span class="highlight-keyword">catch</span> (Exception e) {
<span class="highlight-spacer"></span>            Console.WriteLine($<span class="highlight-literal">"Error printing image: {e.Message}"</span>);
<span class="highlight-spacer"></span>        } <span class="highlight-keyword">finally</span> {
<span class="highlight-spacer"></span>            CloseQuietly(connection, zebraCardPrinter);
<span class="highlight-spacer"></span>        }
<span class="highlight-spacer"></span>    }
<span class="highlight-spacer"></span>
<span id="hrCol38" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp38', 'hrCol38');">+</span><span class="highlight-collapsed">Graphics</span></span><span id="hrExp38" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol38', 'hrExp38');">-</span>    <span class="highlight-preprocessor">#region</span> Graphics
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ConnectionException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="IOException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="NotSupportedException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="System.Security.SecurityException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="UnauthorizedAccessException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> List&lt;GraphicsInfo&gt; DrawGraphics(ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// Generate image data</span>
<span class="highlight-expanded"> </span>        List&lt;GraphicsInfo&gt; graphicsData = <span class="highlight-keyword">new</span> List&lt;GraphicsInfo&gt;();
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">using</span> (ZebraGraphics graphics = <span class="highlight-keyword">new</span> ZebraCardGraphics(zebraCardPrinter)) {
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// Back side mono</span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> monoImagePath = <span class="highlight-literal">@"path\to\myMonoImage.bmp"</span>;
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">byte</span>[] monoImageData = File.ReadAllBytes(monoImagePath);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            graphics.Initialize(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, OrientationType.Landscape, PrintType.MonoK, <span class="highlight-keyword">null</span>);
<span class="highlight-expanded"> </span>            graphics.DrawImage(monoImageData, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, RotationType.RotateNoneFlipNone);
<span class="highlight-expanded"> </span>            ZebraCardImageI zebraCardImage = graphics.CreateImage();
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            graphicsData.Add(AddImage(CardSide.Back, PrintType.MonoK, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">-1</span>, zebraCardImage));
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> graphicsData;
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> GraphicsInfo AddImage(CardSide side, PrintType printType, <span class="highlight-keyword">int</span> xOffset, <span class="highlight-keyword">int</span> yOffset, <span class="highlight-keyword">int</span> fillColor, ZebraCardImageI zebraCardImage) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> GraphicsInfo {
<span class="highlight-expanded"> </span>            Side = side,
<span class="highlight-expanded"> </span>            PrintType = printType,
<span class="highlight-expanded"> </span>            GraphicType = zebraCardImage != <span class="highlight-keyword">null</span> ? GraphicType.BMP : GraphicType.NA,
<span class="highlight-expanded"> </span>            XOffset = xOffset,
<span class="highlight-expanded"> </span>            YOffset = yOffset,
<span class="highlight-expanded"> </span>            FillColor = fillColor,
<span class="highlight-expanded"> </span>            Opacity = <span class="highlight-number">0</span>,
<span class="highlight-expanded"> </span>            Overprint = <span class="highlight-keyword">false</span>,
<span class="highlight-expanded"> </span>            GraphicData = zebraCardImage ?? <span class="highlight-keyword">null</span>
<span class="highlight-expanded"> </span>        };
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> Graphics</span>
<span class="highlight-spacer"></span>
<span id="hrCol78" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp78', 'hrCol78');">+</span><span class="highlight-collapsed">JobStatus</span></span><span id="hrExp78" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol78', 'hrExp78');">-</span>    <span class="highlight-preprocessor">#region</span> JobStatus
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ArgumentException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ConnectionException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="IOException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="OverflowException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Settings.SettingsException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;</span>
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> JobStatusInfo PollJobStatus(<span class="highlight-keyword">int</span> jobId, ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        JobStatusInfo jobStatusInfo = <span class="highlight-keyword">new</span> JobStatusInfo();
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">bool</span> isFeeding = <span class="highlight-keyword">false</span>;
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">long</span> start = Math.Abs(Environment.TickCount);
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>) {
<span class="highlight-expanded"> </span>            jobStatusInfo = zebraCardPrinter.GetJobStatus(jobId);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (!isFeeding) {
<span class="highlight-expanded"> </span>                start = Math.Abs(Environment.TickCount);
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            isFeeding = jobStatusInfo.CardPosition.Contains(<span class="highlight-literal">"feeding"</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> alarmDesc = jobStatusInfo.AlarmInfo.Value &gt; <span class="highlight-number">0</span> ? $<span class="highlight-literal">" ({jobStatusInfo.AlarmInfo.Description})"</span> : <span class="highlight-literal">""</span>;
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">string</span> errorDesc = jobStatusInfo.ErrorInfo.Value &gt; <span class="highlight-number">0</span> ? $<span class="highlight-literal">" ({jobStatusInfo.ErrorInfo.Description})"</span> : <span class="highlight-literal">""</span>;
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            Console.WriteLine($<span class="highlight-literal">"Job {jobId}: status:{jobStatusInfo.PrintStatus}, position:{jobStatusInfo.CardPosition}, alarm:{jobStatusInfo.AlarmInfo.Value}{alarmDesc}, error:{jobStatusInfo.ErrorInfo.Value}{errorDesc}"</span>);
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"done_ok"</span>)) {
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">break</span>;
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"error"</span>) || jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"cancelled"</span>)) {
<span class="highlight-expanded"> </span>                Console.WriteLine($<span class="highlight-literal">"The job encountered an error [{jobStatusInfo.ErrorInfo.Description}] and was cancelled."</span>);
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">break</span>;
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.ErrorInfo.Value &gt; <span class="highlight-number">0</span>) {
<span class="highlight-expanded"> </span>                Console.WriteLine($<span class="highlight-literal">"The job encountered an error [{jobStatusInfo.ErrorInfo.Description}] and was cancelled."</span>);
<span class="highlight-expanded"> </span>                zebraCardPrinter.Cancel(jobId);
<span class="highlight-expanded"> </span>            } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (jobStatusInfo.PrintStatus.Contains(<span class="highlight-literal">"in_progress"</span>) &amp;&amp; isFeeding) {
<span class="highlight-expanded"> </span>                <span class="highlight-keyword">if</span> (Math.Abs(Environment.TickCount) &gt; start + CARD_FEED_TIMEOUT) {
<span class="highlight-expanded"> </span>                    Console.WriteLine(<span class="highlight-literal">"The job timed out waiting for a card and was cancelled."</span>);
<span class="highlight-expanded"> </span>                    zebraCardPrinter.Cancel(jobId);
<span class="highlight-expanded"> </span>                }
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>            Thread.Sleep(<span class="highlight-number">1000</span>);
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> jobStatusInfo;
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> JobStatus</span>
<span class="highlight-spacer"></span>
<span id="hrCol125" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp125', 'hrCol125');">+</span><span class="highlight-collapsed">CleanUp</span></span><span id="hrExp125" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol125', 'hrExp125');">-</span>    <span class="highlight-preprocessor">#region</span> CleanUp
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> CloseQuietly(Connection connection, ZebraCardPrinter zebraCardPrinter) {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (zebraCardPrinter != <span class="highlight-keyword">null</span>) {
<span class="highlight-expanded"> </span>                zebraCardPrinter.Destroy();
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">catch</span> { }
<span class="highlight-expanded"> </span>
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">try</span> {
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">if</span> (connection != <span class="highlight-keyword">null</span>) {
<span class="highlight-expanded"> </span>                connection.Close();
<span class="highlight-expanded"> </span>            }
<span class="highlight-expanded"> </span>        } <span class="highlight-keyword">catch</span> { }
<span class="highlight-expanded"> </span>    }
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span> CleanUp</span>
<span class="highlight-spacer"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="0d80ded4-7fb7-535f-aa84-ad3b90d3e41f.htm">JobUtil Interface</a></div><div class="seeAlsoStyle"><a href="7eb9840d-b278-1055-f4e5-ffcff0b504c3.htm">Zebra.Sdk.Card.Job Namespace</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>© 2017 ZIH Corp. All Rights Reserved.</p> </div>
  </body>
</html>